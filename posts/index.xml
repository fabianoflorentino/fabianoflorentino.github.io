<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fabiano Florentino</title>
    <link>https://fabianoflorentino.github.io/posts/</link>
    <description>Recent content in Posts on Fabiano Florentino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fabianoflorentino.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Meu Tool set de Ferramentas</title>
      <link>https://fabianoflorentino.github.io/posts/2020-04-22-tool-set/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2020-04-22-tool-set/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://images6.alphacoders.com/359/359600.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bom seguindo a turma que criou essa série de posts sobre a caixa de ferramentas usadas no nosso dia a dia
vou segui a partir do &lt;strong&gt;&lt;a href=&#34;https://www.nanoshots.com.br/2020/04/minha-caixa-de-ferramentas-abril2020.html&#34;&gt;Mateus Fidelis&lt;/a&gt;&lt;/strong&gt;
que também veio do &lt;strong&gt;&lt;a href=&#34;https://igordcsouza.github.io/2020-04-16-my-tool-kit-first-tri-2020/&#34;&gt;Igor Souza&lt;/a&gt;&lt;/strong&gt; e também do
&lt;strong&gt;&lt;a href=&#34;https://gutocarvalho.net/blog/meu-toolkit-2020/&#34;&gt;Guto Carvalho&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meu setup é único não distingui de pessoal/trabalho então bora lá!&lt;/p&gt;
&lt;h2 id=&#34;notebook&#34;&gt;&lt;strong&gt;Notebook&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS Catalina 10.15.14
&lt;ul&gt;
&lt;li&gt;Browsers
&lt;ul&gt;
&lt;li&gt;Google Chrome
&lt;ul&gt;
&lt;li&gt;Cisco Webex Extension&lt;/li&gt;
&lt;li&gt;Grammarly for Chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft Edge
&lt;ul&gt;
&lt;li&gt;Cisco Webex Extension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firefox (Sem Extensões)&lt;/li&gt;
&lt;li&gt;Safari (Sem Extensões)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminal
&lt;ul&gt;
&lt;li&gt;iTerm2
&lt;ul&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;li&gt;Zsh
&lt;ul&gt;
&lt;li&gt;Oh My Zsh
&lt;ul&gt;
&lt;li&gt;Plugins
&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;zsh-autosuggestions&lt;/li&gt;
&lt;li&gt;zsh-syntax-highlighting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Theme
&lt;ul&gt;
&lt;li&gt;hyperzsh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Vim
&lt;ul&gt;
&lt;li&gt;syntax on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Powershell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gerenciador de pacotes
&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Editores
&lt;ul&gt;
&lt;li&gt;VSCode
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Gitlens&lt;/li&gt;
&lt;li&gt;Powershell&lt;/li&gt;
&lt;li&gt;Beautify&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;li&gt;Git History&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Jinja&lt;/li&gt;
&lt;li&gt;Markdownlint&lt;/li&gt;
&lt;li&gt;Material Icon Theme&lt;/li&gt;
&lt;li&gt;Pyright&lt;/li&gt;
&lt;li&gt;Python Docstring Formatter&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TexEdit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IM
&lt;ul&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Telegram&lt;/li&gt;
&lt;li&gt;Whatsapp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vídeo Conferência
&lt;ul&gt;
&lt;li&gt;Cisco Webex&lt;/li&gt;
&lt;li&gt;Zoom&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redes Sociais
&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chaveiro de senhas
&lt;ul&gt;
&lt;li&gt;MacPass fork by Keepass2&lt;/li&gt;
&lt;li&gt;1Password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conexão Remota
&lt;ul&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;Microsoft Remote Desktop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VPN
&lt;ul&gt;
&lt;li&gt;Cisco Anny Connection&lt;/li&gt;
&lt;li&gt;Proxifier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage
&lt;ul&gt;
&lt;li&gt;Box&lt;/li&gt;
&lt;li&gt;Onedrive&lt;/li&gt;
&lt;li&gt;Google Drive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtualizadores
&lt;ul&gt;
&lt;li&gt;VMware Fusion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automação
&lt;ul&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Containers
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Office
&lt;ul&gt;
&lt;li&gt;Office 365&lt;/li&gt;
&lt;li&gt;Grammarly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API
&lt;ul&gt;
&lt;li&gt;Postman&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hardware&#34;&gt;&lt;strong&gt;Hardware&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro (15-inch, 2019)
&lt;ul&gt;
&lt;li&gt;Processor 2,3 GHz 8-Core Intel Core i9&lt;/li&gt;
&lt;li&gt;Memory 16 GB 2400 MHz DDR4&lt;/li&gt;
&lt;li&gt;500 GB Flash Storage&lt;/li&gt;
&lt;li&gt;Graphics Radeon Pro 560X 4 GB / Intel UHD Graphics 630 1536 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monitor DELL P2719H Display&lt;/li&gt;
&lt;li&gt;Monitor de som EDIFIER R1010BT&lt;/li&gt;
&lt;li&gt;Mouse Pad Gamer Mapa Mundo Mundi Speed Grande 70x35cm&lt;/li&gt;
&lt;li&gt;Magic Mouse / Magic Keyboard Bluetooth
&lt;ul&gt;
&lt;li&gt;6x Pilhas Recarregavies Sony Cyber Energy c/ Carregador 2 e 4 Slots&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xiaomi Mi 9T 64GB
&lt;ul&gt;
&lt;li&gt;Bateria Pineng 10000mAh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rede
&lt;ul&gt;
&lt;li&gt;Desktop Network 200Mbits&lt;/li&gt;
&lt;li&gt;Xiaomi Mi Router 4 Gigabit Dual Band 2.4GHz / 5GHz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nuvem-pessoal&#34;&gt;&lt;strong&gt;Nuvem Pessoal&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Amazon Prime&lt;/li&gt;
&lt;li&gt;Spotify&lt;/li&gt;
&lt;li&gt;Microsoft GamePass&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;trabalho-e-projetos-pessoais&#34;&gt;&lt;strong&gt;Trabalho e Projetos Pessoais&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux (CentOS / Ubuntu)&lt;/li&gt;
&lt;li&gt;Windows (Server 2012 R2)&lt;/li&gt;
&lt;li&gt;Automação
&lt;ul&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;Make&lt;/li&gt;
&lt;li&gt;Rundeck&lt;/li&gt;
&lt;li&gt;cURL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linguagens
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;ShellScript&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;Yaml&lt;/li&gt;
&lt;li&gt;HCL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Containers
&lt;ul&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Docker Swarm&lt;/li&gt;
&lt;li&gt;IKS (IBM Kubernetes Services)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monitoração
&lt;ul&gt;
&lt;li&gt;Zabbix&lt;/li&gt;
&lt;li&gt;Grafana&lt;/li&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;ELK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gerenciamento de código
&lt;ul&gt;
&lt;li&gt;Gihub&lt;/li&gt;
&lt;li&gt;Github Desktop&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ferramentas de console
&lt;ul&gt;
&lt;li&gt;| (pipe)&lt;/li&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;netcat&lt;/li&gt;
&lt;li&gt;telnet&lt;/li&gt;
&lt;li&gt;net-tools (netstat, route)&lt;/li&gt;
&lt;li&gt;nmap&lt;/li&gt;
&lt;li&gt;ifconfig&lt;/li&gt;
&lt;li&gt;route&lt;/li&gt;
&lt;li&gt;traceroute&lt;/li&gt;
&lt;li&gt;htop, iotop&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;wget, curl&lt;/li&gt;
&lt;li&gt;rsync&lt;/li&gt;
&lt;li&gt;cat, grep, egrep&lt;/li&gt;
&lt;li&gt;tar, gzip, bzip2&lt;/li&gt;
&lt;li&gt;cut, awk, sed&lt;/li&gt;
&lt;li&gt;more, less, head, tail&lt;/li&gt;
&lt;li&gt;df, du, mount&lt;/li&gt;
&lt;li&gt;watch&lt;/li&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metodologias, culturas e técnicas
&lt;ul&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;SRE&lt;/li&gt;
&lt;li&gt;Agile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtualização
&lt;ul&gt;
&lt;li&gt;VMware vCenter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gerenciamento de Atividades
&lt;ul&gt;
&lt;li&gt;Microsoft ToDo&lt;/li&gt;
&lt;li&gt;Bluesight (Ferramente de Trabalho)&lt;/li&gt;
&lt;li&gt;Trello&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blog
&lt;ul&gt;
&lt;li&gt;jekyll&lt;/li&gt;
&lt;li&gt;netlify&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até o próximo review! :^D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entregando VM&#39;s no VMware vCenter/vSphere com o Jenkins</title>
      <link>https://fabianoflorentino.github.io/posts/2021-03-21-jenkins/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2021-03-21-jenkins/</guid>
      <description>&lt;p&gt;Olá pessoal, depois de muito tempo estou de volta!&lt;/p&gt;
&lt;p&gt;No meu primeiro artigo, expliquei e demonstrei como criar máquinas no vCenter/vSphere
usando terraform, e que tal entregar essas máquinas virtuais dentro de um pipeline como se
fosse um aplicativo?&lt;/p&gt;
&lt;p&gt;Não é de hoje que tudo está se convergindo para Cloud Computing e de fato esse parece ser o futuro.
Mas ainda temos o meio do caminho, muitas empresas utilizam parte da sua infraestrutura em datacenters,
migrando e ou utilizando esse dois mundo em uma abordagem de Cloud Hibrida que acaba fazendo parte do
negócio.&lt;/p&gt;
&lt;p&gt;Bom deixando a história de lado bora colocar a mão na massa!&lt;/p&gt;
&lt;p&gt;Nesse artigo vou utilizar o Jenkins para criar o pipeline de entrega dessas máquinas virtuais.
Porque o Jenkins? Ele ainda é um dos serviços de CI/CD mais conhecidos, acredito que todo mundo que usa
uma solução mais moderna, tenha pelo menos passado por ele, acho que ainda é valido conhece-lo. Existem
grandes empresas que o utilizam e muito bem, com abordagens bem bacanas. o iFood é uma dessas empresas.
No TDC do ano passado o pessoal demonstrou um uso de caso que inclusive inspirou esse artigo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eventials.com/Globalcode/https-www-eventials-com-globalcode-tdc-sp-2019-stadium-sexta-2&#34;&gt;IaaC - Autonomia, rastreabilidade, agilidade com Terraform e Pipeline - Diego Ragazzi / Smailli Moraes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;jenkins&#34;&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Para esse artigo vamos usar uma versão em container do Jenkins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull jenkins/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img29.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Junto do Jenkins precisamos de instalar terraform&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -it -d --name jenkins -p 8080:8080 -p 50000:50000 jenkins/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins mkdir /var/jenkins_home/extras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker cp terraform jenkins:/var/jenkins_home/extras/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins /var/jenkins_home/extras/terraform --version
Terraform v0.12.24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img30.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Vamos pegar a senha inicial para inicializar o jenkins&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Abaixo segue o setup inicial do Jenkins até sua tela inicial.&lt;/p&gt;
&lt;h3 id=&#34;unlock-jenkins&#34;&gt;&lt;strong&gt;Unlock Jenkins&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img31.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;customize-jenkins&#34;&gt;&lt;strong&gt;Customize Jenkins&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img32.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img33.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-first-admin-user&#34;&gt;&lt;strong&gt;Create First Admin User&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img34.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;instance-configuration&#34;&gt;&lt;strong&gt;Instance Configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img35.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jenkins-is-ready&#34;&gt;&lt;strong&gt;Jenkins is Ready!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img36.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jenkins-dashboard&#34;&gt;&lt;strong&gt;Jenkins Dashboard&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img37.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;job&#34;&gt;&lt;strong&gt;JOB&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aqui a mágica acontece, vamos criar o pipeline para fazer o deploy da nossa VM.&lt;/p&gt;
&lt;h3 id=&#34;novo-job&#34;&gt;&lt;strong&gt;Novo job&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img38.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img39.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Não vou entrar no detalhe de cada parametro do pipeline, vou direto a criação do pipeline.
Com calma, leia cada parametro entenda se faz sentido para o seu uso.&lt;/p&gt;
&lt;p&gt;Selecione a opção &lt;code&gt;Este build é parametrizado&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img40.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;parametros&#34;&gt;&lt;strong&gt;Parametros&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Para esse exemplo temos parametros iniciais para criar uma máquina virtual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nome da máquina&lt;/li&gt;
&lt;li&gt;Quantidade de máquinas&lt;/li&gt;
&lt;li&gt;Número de processadores&lt;/li&gt;
&lt;li&gt;Número de memória&lt;/li&gt;
&lt;li&gt;Tamanho do disco para instalação do SO.
&lt;strong&gt;OBS:&lt;/strong&gt; Para esse exemplo, estou usando o tamanho de 50 (50GB) por conta da customização do disco
feita no kickstart da imagem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img41.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img42.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img43.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img44.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img45.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img57.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pipeline&#34;&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Ainda no job, vamos configurar o projeto que ira fazer o deploy da(s) máquinas virtuais.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Definição: Pipeline script from SCM&lt;/li&gt;
&lt;li&gt;SCM: Git&lt;/li&gt;
&lt;li&gt;Repositories&lt;/li&gt;
&lt;li&gt;Branches to build&lt;/li&gt;
&lt;li&gt;Script Path&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img46.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Em destaque temos o parametro &lt;code&gt;Script Path&lt;/code&gt; onde se encontra o arquivo &lt;code&gt;Jenkinsfile&lt;/code&gt;, ele
quem ira fazer todo o processo de deploy.&lt;/p&gt;
&lt;p&gt;Nesse exemplo existem duas variáveis &lt;code&gt;PROVIDER_USR&lt;/code&gt; e &lt;code&gt;PROVIDER_PSW&lt;/code&gt;, que são as informações que o terraform irá usar no módulo provider para acessar o vSphere/vCenter.&lt;/p&gt;
&lt;p&gt;Bom, vou tomar que você tenha um breve entendimento de segurança e entenda que estamos fazendo um exemplo e que estamos em um ambiente controlado, &lt;code&gt;POR FAVOR, NÃO USE ISSO EM PRODUÇÃO&lt;/code&gt; estude uma
forma mais segura ok?&lt;/p&gt;
&lt;p&gt;No próprio jenkins existe uma forma de você gerenciar arquivos de credenciais e senhas. Vamos utilizar a opção de texto secreto &lt;code&gt;Secret text&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img47.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img48.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img49.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img50.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img51.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img52.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img53.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img54.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img55.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Junto com a configuração de credencial do jenkins, no Jenkinsfile é preciso usar a seguinte função.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Essa função cria uma mascara aos caracteres no log do JOB em execução.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img56.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Eis a mágica! :^D&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;pipeline {
	agent {
        any {}
	}
	stages {
		stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Inicializando o Terraform&amp;#39;&lt;/span&gt;) {
			steps {
				script {
                    withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)]) {
                        sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;export TF_VAR_provider_user=${env.PROVIDER_USR} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_provider_password=${env.PROVIDER_PSW} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_name_new_vm=${env.NAME_NEW_VM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_vm_count=${env.VM_COUNT} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_num_cpus=${env.NUM_CPUS} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_num_mem=${env.NUM_MEM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_size_disk=${env.SIZE_DISK} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; /var/jenkins_home/extras/terraform init \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;    					&amp;amp;&amp;amp; /var/jenkins_home/extras/terraform plan -out deploy.tfplan&amp;#34;&lt;/span&gt;
                    }
				}
			}
		}
        stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Construindo Maquina Virtual&amp;#39;&lt;/span&gt;) {
            steps {
                script {
                   &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;${env.TF_STATE}&amp;#34;&lt;/span&gt; == &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;APPLY&amp;#34;&lt;/span&gt;) {
                        timeout(time: 3, unit: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;MINUTES&amp;#34;&lt;/span&gt;) {
                            input(id: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;chooseOptions&amp;#39;&lt;/span&gt;, message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Criar a maquina virtual?&amp;#39;&lt;/span&gt;, ok: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Confirmar&amp;#39;&lt;/span&gt;)
                            script {
                                sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;/var/jenkins_home/extras/terraform apply deploy.tfplan&amp;#39;&lt;/span&gt;
                            }
                        }
                    }
                }
            }
        }
        stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Destruindo Maquina Virtual&amp;#39;&lt;/span&gt;) {
            steps {
                script {
                   &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;${env.TF_STATE}&amp;#34;&lt;/span&gt; == &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;DESTROY&amp;#34;&lt;/span&gt;) {
                        timeout(time: 3, unit: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;MINUTES&amp;#34;&lt;/span&gt;) {
                            input(id: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;chooseOptions&amp;#39;&lt;/span&gt;, message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Destruir a maquina virtual?&amp;#39;&lt;/span&gt;, ok: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Confirmar&amp;#39;&lt;/span&gt;)
                            script {
                                withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)]) {
                                    sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;export TF_VAR_provider_user=${env.PROVIDER_USR} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_provider_password=${env.PROVIDER_PSW} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_name_new_vm=${env.NAME_NEW_VM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_vm_count=${env.VM_COUNT} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_num_cpus=${env.NUM_CPUS} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_num_mem=${env.NUM_MEM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_size_disk=${env.SIZE_DISK} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                					&amp;amp;&amp;amp; /var/jenkins_home/extras/terraform destroy -auto-approve&amp;#34;&lt;/span&gt;
                                }
                            }
                        }
                    }
                }
            }
        }
	}
	post {
        success {
          slackSend (
              color: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;#088A29&amp;#39;&lt;/span&gt;,
              message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;:white_check_mark: SUCCESSFUL: Job &amp;#39;${env.JOB_NAME} [${env.BUILD_NUMBER}]&amp;#39; (${env.BUILD_URL})&amp;#34;&lt;/span&gt;)
        }

        failure {
          slackSend (
              color: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;#DF0101&amp;#39;&lt;/span&gt;,
              message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;:rotating_light: FAILED: Job &amp;#39;${env.JOB_NAME} [${env.BUILD_NUMBER}]&amp;#39; (${env.BUILD_URL})&amp;#34;&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;construindo-e-ou-destruindo-sua-vm&#34;&gt;&lt;strong&gt;Construindo e ou Destruindo sua VM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Depois de realizar todas as configurações, vamos criar e ou destruir nossas máquinas virtuais.&lt;/p&gt;
&lt;p&gt;No projeto, vamos contruir &lt;code&gt;APPLY&lt;/code&gt; com parametros.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img58.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Confirme a criação ou destruição do ambiente.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img59.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img60.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Você também pode destruir(remover) as máquinas executando novamente o projeto selecionando o
&lt;code&gt;DESTROY&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img61.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Uma perfumaria que pode ser feita é o alerta no slack :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img63.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/SQTXTZx1e7s&#34; title=&#34;Entregando VM&#39;s no VMware vCenter/vSphere com o Jenkins&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/SQTXTZx1e7s/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A alguns anos atrás acredito que para a maioria dos Sysadmin&amp;rsquo;s(Ops), SRE&amp;rsquo;s, DevOps Engineer, não importa
o nome do cargo, criar um fluxo (pipeline) de entrega de infraestrutura seria inimaginavel. Esse foi uma pequena desmonstração do que pode ser feito, uma forte recomendação é ler a documentação do módulo &lt;a href=&#34;https://www.terraform.io/docs/providers/vsphere/index.html&#34;&gt;vSphere&lt;/a&gt; do terraform e conhecer outras configurações que podem ser aplicadas na sua infraestrutura.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projeto:&lt;/strong&gt; &lt;a href=&#34;https://github.com/fabianoflorentino/terraform-deploy-vm&#34;&gt;https://github.com/fabianoflorentino/terraform-deploy-vm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando um ambiente de desenvolvimento para o Ansible</title>
      <link>https://fabianoflorentino.github.io/posts/2020-01-14-ansible_02/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2020-01-14-ansible_02/</guid>
      <description>&lt;p&gt;A alguns dias atrás nosso mestre &lt;a href=&#34;https://gomex.me&#34;&gt;@gomex&lt;/a&gt; abriu uma thread no twitter sobre como é
estar desenvolvendo infraestrutura hoje em dia pelo time de Ops &lt;a href=&#34;https://twitter.com/gomex/status/1215774716138573824?s=21&#34;&gt;Link&lt;/a&gt; e como isso é libertador, e de fato, é uma sensação sem igual para um Sysadmin.&lt;/p&gt;
&lt;p&gt;Como várias pessoas comentaram eu também não pude deixar de participar. :D,&lt;/p&gt;
&lt;p&gt;Na ocasião por coincidência estava desenvolvendo uma imagem de container docker para o ansible!&lt;/p&gt;
&lt;p&gt;Mas por quê?&lt;/p&gt;
&lt;p&gt;A ideia e criar um ambiente centralizado com o ansible instalado sem a necessidade de &amp;ldquo;sujar&amp;rdquo; o seu sistema operacional corrente com várias ferramentas que usamos durante o desenvolvimento de módulos, roles, tasks e tudo que permeia o desenvolvimento.&lt;/p&gt;
&lt;p&gt;Nesse artigo vou escrever/descrever uma necessidade própria, então tome esse artigo como um guia e adapte para sua necessidade beleza?! :D&lt;/p&gt;
&lt;p&gt;Vamos criar uma estrutura de arquivos e diretórios para desenvolver o projeto.&lt;/p&gt;
&lt;p&gt;Crie um diretório qualquer e dentro desse diretório monte a estrutura de arquivos e diretórios proposto abaixo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir new_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No final teremos algo assim.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;new_hosts master 3d ➜ tree -L 5
.
├── Dockerfile
├── Makefile
├── ansible.cfg
├── inventory
│   ├── group_vars
│   │   └── all.yaml
│   └── invetory.ini
├── requirements.txt
├── roles
│   └── common
│       ├── handlers
│       │   └── main.yaml
│       ├── tasks
│       │   └── main.yaml
│       └── templates
│           ├── 11-hardening.conf.j2
│           └── ntp.conf.j2
├── setup.yaml
└── ssh-keys
    └── ssh-keygen.sh

8 directories, 12 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;requisitos&#34;&gt;Requisitos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Máquina Virtual
&lt;ul&gt;
&lt;li&gt;Ubuntu Server&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dockerfile&#34;&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com o dockerfile vamos construir a imagem docker com o ansible instalado para centralizar a execução e desenvolvimento do projeto de automação.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; python:3.7-alpine&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;COPY&lt;/span&gt; requirements.txt .&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;RUN&lt;/span&gt; apk add vim make sshpass openssh gcc g++ libffi-dev openssl openssl-dev &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;  &amp;amp;&amp;amp; adduser --disabled-password --gecos &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; ansible &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;  &amp;amp;&amp;amp; pip install -r requirements.txt&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; ansible&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; /ansible&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;ENTRYPOINT&lt;/span&gt; [ &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt; ]&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;makefile&#34;&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com o &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;make&lt;/a&gt; criamos uma forma de centralizar e automatizar os comandos que utilizamos repetidas vezes ao longo do desenvolvimento.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;.PHONY: help
.DEFAULT_GOAL := help

help:
	@grep -E &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;^[0-9a-zA-Z_-]+:.*?## .*$$&amp;#39;&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt; | awk &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; {printf &amp;#34;\033[36m%-25s\033[0m %s\n&amp;#34;, $$1, $$2, $$3, $$4, $$5}&amp;#39;&lt;/span&gt;

build: &lt;span style=&#34;font-style:italic&#34;&gt;## Make image for use terraform
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@docker build --no-cache -t fabianoflorentino/ansible .

run: &lt;span style=&#34;font-style:italic&#34;&gt;## Start Terraform
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@docker run -it --name ansible -v &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;PWD&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;:/ansible --entrypoint &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; fabianoflorentino/ansible sh

rm: &lt;span style=&#34;font-style:italic&#34;&gt;## Remove container
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@docker container rm -f ansible

rmi: &lt;span style=&#34;font-style:italic&#34;&gt;## Remove untagged images
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@docker rmi -f &lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker images | grep &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;^&amp;lt;none&amp;gt;&amp;#34;&lt;/span&gt; |cut -d&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -f50&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;

ansible-test: &lt;span style=&#34;font-style:italic&#34;&gt;## Test of ansible roles to apply
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@ansible-playbook -i inventory/invetory.ini -u supervisor -b -e ssh_connection_user=supervisor setup.yaml -C

ansible-run: &lt;span style=&#34;font-style:italic&#34;&gt;## Test of ansible roles to apply
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;	@ansible-playbook -i inventory/invetory.ini -u supervisor -b -e ssh_connection_user=supervisor setup.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ansiblecfg&#34;&gt;&lt;strong&gt;ansible.cfg&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Nesse arquivo determinamos alguns parametros para melhorar a execução do ansible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;[defaults]&lt;/span&gt;
gathering = &lt;span style=&#34;font-style:italic&#34;&gt;smart&lt;/span&gt;
forks               = &lt;span style=&#34;font-style:italic&#34;&gt;5&lt;/span&gt;
callback_whitelist  = &lt;span style=&#34;font-style:italic&#34;&gt;timer, mail, profile_tasks&lt;/span&gt;
host_key_checking   = &lt;span style=&#34;font-style:italic&#34;&gt;False&lt;/span&gt;
fact_caching_connection = &lt;span style=&#34;font-style:italic&#34;&gt;/tmp/facts_cache&lt;/span&gt;
fact_caching = &lt;span style=&#34;font-style:italic&#34;&gt;jsonfile&lt;/span&gt;
fact_caching_timeout = &lt;span style=&#34;font-style:italic&#34;&gt;7200&lt;/span&gt;
gather_subset=&lt;span style=&#34;font-style:italic&#34;&gt;!hardware&lt;/span&gt;

error_on_missing_handler = &lt;span style=&#34;font-style:italic&#34;&gt;True&lt;/span&gt;
sudo_flags = &lt;span style=&#34;font-style:italic&#34;&gt;-H -S -n&lt;/span&gt;

&lt;span style=&#34;font-weight:bold&#34;&gt;[ssh_connection]&lt;/span&gt;
ssh_args     = &lt;span style=&#34;font-style:italic&#34;&gt;-C -o ControlMaster=auto -o ControlPersist=18000&lt;/span&gt;
control_path = &lt;span style=&#34;font-style:italic&#34;&gt;%(directory)s/ansible-ssh-%%h-%%p-%%r&lt;/span&gt;
pipelining   = &lt;span style=&#34;font-style:italic&#34;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inventory&#34;&gt;&lt;strong&gt;inventory&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Diretório onde configuramos os hosts que serão gerenciados pelo ansible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p inventory/group_vars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── inventory
│   ├── group_vars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;allyaml&#34;&gt;&lt;strong&gt;all.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aqui determinamos algumas variáveis que será utilizada pelo group de hosts &lt;strong&gt;[all]&lt;/strong&gt; que fica no arquivo &lt;strong&gt;inventory.ini&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim inventory/group_vars/all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── inventory
│   ├── group_vars
│   │   └── all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;font-weight:bold&#34;&gt;packages&lt;/span&gt;:
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_install&lt;/span&gt;:
    - vim
    - tree
    - netcat
    - tcpdump
    - nmap
    - ntp
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_remove&lt;/span&gt;:
    &lt;span style=&#34;font-style:italic&#34;&gt;-
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;services:&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_enable&lt;/span&gt;:
    - ntp
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_disable&lt;/span&gt;:

&lt;span style=&#34;font-weight:bold&#34;&gt;ntp_servers&lt;/span&gt;:
  - &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;server 0.br.pool.ntp.org&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;server 1.br.pool.ntp.org&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;server 2.br.pool.ntp.org&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;server 3.br.pool.ntp.org&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-weight:bold&#34;&gt;hardening&lt;/span&gt;:
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv6_conf_all_disable_ipv6&lt;/span&gt;: 1
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv6_conf_default_disable_ipv6&lt;/span&gt;: 1
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv6_conf_lo_disable_ipv6&lt;/span&gt;: 1
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_conf_all_accept_source_route&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;ipv4_conf_all_forwarding&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_conf_all_accept_redirects&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_conf_all_secure_redirects&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_conf_all_send_redirects&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_conf_all_rp_filter&lt;/span&gt;: 0
  &lt;span style=&#34;font-weight:bold&#34;&gt;net_ipv4_icmp_echo_ignore_all&lt;/span&gt;: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;inventoryini&#34;&gt;&lt;strong&gt;inventory.ini&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Arquivo com os hosts e grupo de hosts que o ansible irá gerenciar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim invetory/inventory.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── inventory
│   └── invetory.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;[all]&lt;/span&gt;

vm-1 ansible_host=&lt;span style=&#34;font-style:italic&#34;&gt;192.168.7.100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;requirementstxt&#34;&gt;&lt;strong&gt;requirements.txt&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Lista com os módulos que serão instalados junto com o ansible para o funcionamento adequado.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;# Note: this requirements.txt file is used to specify what dependencies are
# needed to make the package run rather than for deployment of a tested set of
# packages.  Thus, this should be the loosest set possible (only required
# packages, not optional ones, and with the widest range of versions that could
# be suitable)
crypto
cryptography
ansible
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;roles&#34;&gt;&lt;strong&gt;roles&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Diretório com o conjunto de roles/tasks que o ansible irá aplicar nos hosts gerenciados.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── roles
│   └── common
│       ├── handlers
│       │   └── main.yaml
│       ├── tasks
│       │   └── main.yaml
│       └── templates
│           ├── 11-hardening.conf.j2
│           └── ntp.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p roles/common/{tasks,handlers,templates}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O diretório &lt;strong&gt;common&lt;/strong&gt; é a role e conjunto de tasks que iremos utilizar para executar o projeto no host(vm) de desenvolvimento.&lt;/p&gt;
&lt;h3 id=&#34;tasks---mainyaml&#34;&gt;&lt;strong&gt;tasks - main.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Conjunto de tasks que será executada nos hosts gerenciados pelo ansible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Update System&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Install Essential Packages&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Enable Essential Services&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Configure NTP service&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Hardening - Kernel Parameters&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/common/tasks/main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── roles
│   └── common
│       ├── tasks
│       │   └── main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Update System&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;package&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: latest
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Install Essential Packages&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;apt&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: present
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;{{ item }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;{{ packages.to_install }}&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Enable Essential Services&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;apt&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: present
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;{{ item }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;{{ services.to_enable }}&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Configure NTP service&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;src&lt;/span&gt;: ntp.conf.j2
    &lt;span style=&#34;font-weight:bold&#34;&gt;dest&lt;/span&gt;: /etc/ntp.conf
    &lt;span style=&#34;font-weight:bold&#34;&gt;owner&lt;/span&gt;: root
    &lt;span style=&#34;font-weight:bold&#34;&gt;mode&lt;/span&gt;: 0644
  &lt;span style=&#34;font-weight:bold&#34;&gt;notify&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Restart NTP service&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Hardening - Kernel Parameters&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;src&lt;/span&gt;: 11-hardening.conf.j2
    &lt;span style=&#34;font-weight:bold&#34;&gt;dest&lt;/span&gt;: /etc/sysctl.d/11-hardening.conf
    &lt;span style=&#34;font-weight:bold&#34;&gt;owner&lt;/span&gt;: root
    &lt;span style=&#34;font-weight:bold&#34;&gt;group&lt;/span&gt;: root
    &lt;span style=&#34;font-weight:bold&#34;&gt;mode&lt;/span&gt;: 0644
  &lt;span style=&#34;font-weight:bold&#34;&gt;notify&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Apply Kernel Parameters&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;templates&#34;&gt;&lt;strong&gt;templates&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Arquivos templates com variáveis para criar os arquivos de configuração dinamicamente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── roles
│   └── common
│       └── templates
│           ├── 11-hardening.conf.j2
│           └── ntp.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/common/templates/11-hardening.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;11-hardeningconf&#34;&gt;&lt;strong&gt;11-hardening.conf&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# {{ ansible_managed }}&lt;/span&gt;

ipv4.conf.all.forwarding = {{ hardening.ipv4_conf_all_forwarding}}
net.ipv4.conf.all.accept_source_route = {{ hardening.net_ipv4_conf_all_accept_source_route}}
net.ipv4.conf.all.accept_redirects = {{ hardening.net_ipv4_conf_all_accept_redirects }}
net.ipv4.conf.all.secure_redirects = {{ hardening.net_ipv4_conf_all_secure_redirects }}
net.ipv4.conf.all.send_redirects = {{ hardening.net_ipv4_conf_all_send_redirects }}
net.ipv4.conf.all.rp_filter = {{ hardening.net_ipv4_conf_all_rp_filter }}
net.ipv4.icmp_echo_ignore_all = {{ hardening.net_ipv4_icmp_echo_ignore_all }}
net.ipv6.conf.all.disable_ipv6 = {{ hardening.net_ipv6_conf_all_disable_ipv6 }}
net.ipv6.conf.default.disable_ipv6 = {{ hardening.net_ipv6_conf_default_disable_ipv6}}
net.ipv6.conf.lo.disable_ipv6 = {{ hardening.net_ipv6_conf_lo_disable_ipv6 }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;ntpconf&#34;&gt;&lt;strong&gt;ntp.conf&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/common/templates/ntp.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;#
&lt;span style=&#34;font-style:italic&#34;&gt;# {{ ansible_managed }}&lt;/span&gt;
#
&lt;span style=&#34;font-style:italic&#34;&gt;# For more information about this file, see the man pages&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).&lt;/span&gt;

driftfile /var/lib/ntp/drift

&lt;span style=&#34;font-style:italic&#34;&gt;# Permit time synchronization with our time source, but do not&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# permit the source to query or modify the service on this system.&lt;/span&gt;
restrict default nomodify notrap nopeer noquery

&lt;span style=&#34;font-style:italic&#34;&gt;# Permit all access over the loopback interface.  This could&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# be tightened as well, but to do so would effect some of&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# the administrative functions.&lt;/span&gt;
restrict 127.0.0.1
restrict ::1

&lt;span style=&#34;font-style:italic&#34;&gt;# Hosts on local network are less restricted.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#restrict 192.168.1.0 netmask 255.255.255.0 nomodify notrap&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Use public servers from the pool.ntp.org project.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# Please consider joining the pool (http://www.pool.ntp.org/join.html).&lt;/span&gt;
{% &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; server in ntp_servers %}
{{ server }}
{% endfor %}

logfile /var/log/ntp.log

&lt;span style=&#34;font-style:italic&#34;&gt;#broadcast 192.168.1.255 autokey        # broadcast server&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#broadcastclient                        # broadcast client&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#broadcast 224.0.1.1 autokey            # multicast server&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#multicastclient 224.0.1.1              # multicast client&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#manycastserver 239.255.254.254         # manycast server&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#manycastclient 239.255.254.254 autokey # manycast client&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Enable public key cryptography.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#crypto&lt;/span&gt;

includefile /etc/ntp/crypto/pw

&lt;span style=&#34;font-style:italic&#34;&gt;# Key file containing the keys and key identifiers used when operating&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# with symmetric key cryptography.&lt;/span&gt;
keys /etc/ntp/keys

&lt;span style=&#34;font-style:italic&#34;&gt;# Specify the key identifiers which are trusted.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#trustedkey 4 8 42&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Specify the key identifier to use with the ntpdc utility.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#requestkey 8&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Specify the key identifier to use with the ntpq utility.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#controlkey 8&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Enable writing of statistics records.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#statistics clockstats cryptostats loopstats peerstats&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Disable the monitoring facility to prevent amplification attacks using ntpdc&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# monlist command when default restrict does not include the noquery flag. See&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# CVE-2013-5211 for more details.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# Note: Monitoring will not be disabled with the limited restriction flag.&lt;/span&gt;
disable monitor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handlers&#34;&gt;&lt;strong&gt;handlers&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Tarefas configuradas para serem re-executadas caso tenha alguma alteração nas configurações das tasks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── roles
│   └── common
│       ├── handlers
│       │   └── main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/common/handlers/main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Restart NTP service&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: ntp
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: restarted
    &lt;span style=&#34;font-weight:bold&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Apply Kernel Parameters&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;    sysctl --system&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;register&lt;/span&gt;: kernel_parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setupyaml&#34;&gt;&lt;strong&gt;setup.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Playbook que executa o conjuntos de roles que será aplicado nos hosts(vm&amp;rsquo;s) gerenciados pelo ansible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;new_hosts master 3d ➜ tree -L 5
.
├── setup.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim new_hosts/setup.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Prepare new Server&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;hosts&lt;/span&gt;:
    - all
  &lt;span style=&#34;font-weight:bold&#34;&gt;roles&lt;/span&gt;:
    - {&lt;span style=&#34;font-weight:bold&#34;&gt;role: common, tags&lt;/span&gt;: common}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ssh-keys&#34;&gt;&lt;strong&gt;ssh-keys&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;O ansible faz o gerenciamentos dos hosts através de comunicação ssh para todos os sistemas que o suportam.&lt;/p&gt;
&lt;p&gt;A título de curiosidade no windows ele cria uma comunicação do tipo &lt;a href=&#34;https://pt.wikipedia.org/wiki/Chamada_de_procedimento_remoto&#34;&gt;RPC(Chamada de Procedimento Remoto)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Criei esse script para gerar o par de chaves ssh que o ansible irá utilizar no container para gerenciar os hosts de destino.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;new_hosts master 3d ➜ tree -L 5
.
└── ssh-keys
    └── ssh-keygen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim ssh-keys/ssh-keygen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;&#34;&gt;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;
mkdir /home/ansible/.ssh

ssh-keygen -t rsa -N &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -f ./ssh-keys/ansible -C ansible@dev

cp -rf ./ssh-keys/ansible /home/ansible/.ssh/id_rsa
cp -rf ./ssh-keys/ansible.pub /home/ansible/.ssh/id_rsa.pub

chmod 400 /home/ansible/.ssh/id_rsa
chmod 644 /home/ansible/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ufa!&lt;/p&gt;
&lt;p&gt;Depois de montar toda a nossa estrutura, acredito que temos algo assim&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;.
├── Dockerfile
├── Makefile
├── ansible.cfg
├── inventory
│   ├── group_vars
│   │   └── all.yaml
│   └── invetory.ini
├── requirements.txt
├── roles
│   └── common
│       ├── handlers
│       │   └── main.yaml
│       ├── tasks
│       │   └── main.yaml
│       └── templates
│           ├── 11-hardening.conf.j2
│           └── ntp.conf.j2
├── setup.yaml
└── ssh-keys
    └── ssh-keygen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;build&#34;&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;No mesmo nível onde está o nosso dockerfile vamos construir a imagem com o ansible instalado.&lt;/p&gt;
&lt;p&gt;Lembra do Makefile? então, vamos utilizar bastente ele agora.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img20.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esse commando está fazendo o mesmo que:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build --no-cache -t fabianoflorentino/ansible .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Melhor né? :D, automação da automação!&lt;/p&gt;
&lt;p&gt;e assim para todos os comandos que iremos utilizar, para verificar a sintaxe dos comandos volta lá no arquivo Makefile e veja o que cada comando está executando beleza? :D&lt;/p&gt;
&lt;p&gt;No final se tudo ocorreu bem teremos a seguinte mensagem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Successfully built 3894bf22ae0d
Successfully tagged fabianoflorentino/ansible:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img21.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ansible&#34;&gt;&lt;strong&gt;Ansible&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com a imagem pronta vamos iniciar o container para utilizamos o ansible de forma isolada em um container mas interagindo com o nosso projeto.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img22.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Como de dentro do container estamos conseguindo acessar os arquivos do projeto?&lt;/p&gt;
&lt;p&gt;A forma como estamos executando o container. Na execução estamos montando o diretório corrente dentro do container e acessamos o container através do shell sh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -it --name ansible -v &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;PWD&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;:/ansible --entrypoint &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; fabianoflorentino/ansible sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ssh&#34;&gt;&lt;strong&gt;SSH&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;De dentro do container execute o script que cria o par de chaves ssh para comunicação com os hosts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sh ssh-keys/ssh-keygen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img23.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transfira a chave ssh publica para o(s) host(s) que serão gerenciados.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh-copy-id -i /home/ansible/.ssh/id_rsa.pub supervisor@192.168.7.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img24.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Teste a comunicação com o(s) host(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ansible -i inventory/invetory.ini all -u supervisor -b -m ping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img25.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploy-da-vm&#34;&gt;&lt;strong&gt;Deploy da VM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com a comunicação estabelecida podemos aplicar a(s) roles que foi desenvolvida nesse projeto no caso a role &lt;strong&gt;common&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make ansible-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esse comando irá fazer o teste de execução das tasks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img26.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;O que estiver em amarelo o ansible irá executar a alteração o que estiver em verde é porque a ação esperada já foi executada ou está de acordo com a task.&lt;/p&gt;
&lt;p&gt;Feito o teste, podemos aplicar realmente as alterações no host(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make ansible-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img27.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;idempotência&#34;&gt;&lt;strong&gt;Idempotência&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Uma boa prática é sempre buscar &lt;a href=&#34;https://pt.wikipedia.org/wiki/Idempot%C3%AAncia&#34;&gt;Idempotência&lt;/a&gt; na execução da sua gerencia de configuração, uma vez aplicada aquele conjunto de configuração ele só poderá ser modificado caso aja modificação no código do seu projeto, do contrário não importa quantas vezes você executar o ansible, ele sempre terá que aplicar as mesmas configurações previamente configuradas.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make ansible-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img28.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/knIVwuF16zI&#34; title=&#34;Criando um ambiente de desenvolvimento para o Ansible&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/knIVwuF16zI/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Como mencionanei no começo do artigo o &lt;a href=&#34;https://gomex.me&#34;&gt;@gomex&lt;/a&gt; iniciou um thread muito bacana sobre como nós antigos Sysadmin(Ops) agora SRE&amp;rsquo;s, DevOps Engineer, Eng. DevOps e afins não importa o nome, temos a satisfação de estar entregando infraestrutura como código, criando ambiente de desenvolvimento como o citado ao longo desse artigo.&lt;/p&gt;
&lt;p&gt;É muito legal ver uma área admirada por muitos no mundo de tecnologia se transformar radicalmente. Bom,espero ajudar bastante gente com esse artigo.&lt;/p&gt;
&lt;p&gt;Ah! ia me esquecendo, parte do que demonstrei aqui com o Makefile aprendi pertubando muito o &lt;a href=&#34;http://igordcsouza.github.io/&#34;&gt;@igorsouza&lt;/a&gt; vlw d++ mano :D!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projeto:&lt;/strong&gt; &lt;a href=&#34;http://bit.ly/2Ns2ZRs&#34;&gt;http://bit.ly/2Ns2ZRs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HAProxy LoadBalancer em HA com Keepalived Automatizado</title>
      <link>https://fabianoflorentino.github.io/posts/2020-01-07-ansible_01/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2020-01-07-ansible_01/</guid>
      <description>&lt;p&gt;Toda a infraestrutura de TI hoje seja ela Cloud ou on-premise utiliza balanceadores de carga
como a sua porta de entrada. Hoje acredito que todos os provedores de serviço de Cloud com salve
exceções não fornecem esse tipo de serviço.&lt;/p&gt;
&lt;p&gt;Mas e na infraestrutura on-premise como implementamos isso?&lt;/p&gt;
&lt;p&gt;Nesse artigo trago a configuração do HAProxy em HA com Keepalived automatizado com ansible.
Uma solução simples e bastante robusta dependendo da sua infraestrutura.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;2 Máquinas virtuais&lt;/li&gt;
&lt;li&gt;2x
&lt;ul&gt;
&lt;li&gt;Ubuntu Server 18.04&lt;/li&gt;
&lt;li&gt;2 vCPU&lt;/li&gt;
&lt;li&gt;1GB RAM&lt;/li&gt;
&lt;li&gt;50GB Disco&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;diretórios&#34;&gt;&lt;strong&gt;Diretórios&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Precisamos criar uma árvore de diretórios para que o ansible execute de forma correta.
Na documentação do ansible existe um guia de como fazer isso. &lt;a href=&#34;https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html#directory-layout&#34;&gt;Link.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p ansible-haproxy/{inventory/group_vars,roles,}
mkdir -p roles/haproxy
mkdir -p roles/haproxy/handlers
mkdir -p roles//haproxy/tasks
mkdir -p roles/haproxy/templates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tree -L 5 ansible-haproxy

ansible-haproxy
├── inventory
│   └── group_vars
└── roles
    └── haproxy
        ├── handlers
        ├── tasks
        └── templates

7 directories, 0 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;arquivos&#34;&gt;&lt;strong&gt;Arquivos&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;inventoryini&#34;&gt;&lt;strong&gt;inventory.ini&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esse arquivo é responsável por armazenar os hosts que serão utilizados para configurar os servidores HAProxy.&lt;/p&gt;
&lt;p&gt;Crie o arquivo no diretório &lt;strong&gt;ansible-haproxy/inventory&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;[all]&lt;/span&gt;
haproxy-1 ansible_host=&lt;span style=&#34;font-style:italic&#34;&gt;192.168.7.5  ip=192.168.7.5&lt;/span&gt;
haproxy-2 ansible_host=&lt;span style=&#34;font-style:italic&#34;&gt;192.168.7.7  ip=192.168.7.7&lt;/span&gt;

&lt;span style=&#34;font-weight:bold&#34;&gt;[haproxy]&lt;/span&gt;
haproxy-1
haproxy-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;allyaml&#34;&gt;&lt;strong&gt;all.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O arquivo &lt;strong&gt;all.yml&lt;/strong&gt; corresponde as variáveis que serão utilizadas na role de insltação e configuração dos servidores.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim inventory/group_vars/all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;font-weight:bold&#34;&gt;packages&lt;/span&gt;:
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_install&lt;/span&gt;:
    - haproxy
    - keepalived
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_remove&lt;/span&gt;:
    &lt;span style=&#34;font-style:italic&#34;&gt;-
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;services:&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_enable&lt;/span&gt;:
    - haproxy
    - keepalived
  &lt;span style=&#34;font-weight:bold&#34;&gt;to_disable&lt;/span&gt;:
    -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;haproxyyaml&#34;&gt;&lt;strong&gt;haproxy.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esse arquivo contem as variáveis para configuração do HAProxy e Keepalived.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim inventory/group_vars/haproxy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;font-style:italic&#34;&gt;# Virtual IP que será utilizado pelo Keepalived.&lt;/span&gt;
&lt;span style=&#34;font-weight:bold&#34;&gt;virtual_ipaddress&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;192.168.246.254&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Hostname do servidor primário haproxy, use o mesmo hostname do inventário.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# Ex.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# [all]&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# haproxy-1 ansible_host=1.2.3.4&lt;/span&gt;
&lt;span style=&#34;font-weight:bold&#34;&gt;haproxy_master&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;haproxy-1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Selecione o algoritmo de balanceamento: first, leastconn, static-rr or roundrobin.&lt;/span&gt;
&lt;span style=&#34;font-weight:bold&#34;&gt;balance_algorithm&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;roundrobin&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Selecione o modo HAProxy: layer_7 or layer_4&lt;/span&gt;
&lt;span style=&#34;font-weight:bold&#34;&gt;haproxy_mode&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;layer_7&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Dominio que está em uso.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# OBS: Essa configuração é para o modo Layer 7.&lt;/span&gt;
&lt;span style=&#34;font-weight:bold&#34;&gt;my_domain&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;local.lab&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# Para configurar novos APP&amp;#39;s basta repetir o bloco de variaveis conforme exemplo abaixo.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# Ex:&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# new_app:&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#   app_1:&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     name: &amp;#34;api_1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     port_front: 8070&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     port_back: 30870&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     backend: {&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_1&amp;#34;: &amp;#34;10.0.0.1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_2&amp;#34;: &amp;#34;172.16.0.1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_3&amp;#34;: &amp;#34;192.168.0.1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#   app_2:&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     name: &amp;#34;api_2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     port_front: 8071&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     port_back: 30871&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     backend: {&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_1&amp;#34;: &amp;#34;10.0.0.1&amp;#34;, # Finalize a linha com &amp;#34;,&amp;#34; caso use mais de um backend.&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_2&amp;#34;: &amp;#34;172.16.0.1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#       &amp;#34;hostname_3&amp;#34;: &amp;#34;192.168.0.1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;#     }&lt;/span&gt;

&lt;span style=&#34;font-weight:bold&#34;&gt;new_app&lt;/span&gt;:
  &lt;span style=&#34;font-weight:bold&#34;&gt;app-1&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;api-1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;font-weight:bold&#34;&gt;port_front&lt;/span&gt;: 8080
    &lt;span style=&#34;font-weight:bold&#34;&gt;port_back&lt;/span&gt;: 8080
    &lt;span style=&#34;font-weight:bold&#34;&gt;backend&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;webserver-1&amp;#34;: &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;192.168.246.20&amp;#34;&lt;/span&gt;,
    }
  &lt;span style=&#34;font-weight:bold&#34;&gt;app-2&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;api-2&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;font-weight:bold&#34;&gt;port_front&lt;/span&gt;: 8081
    &lt;span style=&#34;font-weight:bold&#34;&gt;port_back&lt;/span&gt;: 8081
    &lt;span style=&#34;font-weight:bold&#34;&gt;backend&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;webserver-1&amp;#34;: &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;192.168.246.20&amp;#34;&lt;/span&gt;,
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;tasks---mainyaml&#34;&gt;&lt;strong&gt;tasks - main.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nesse arquivo configuramos as tasks(tarefas) para o ansible fazer toda a sua mágica.
A sintaxe do arquivo yaml é bem intuitiva visto que você está declarando toda a configuração.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/haproxy/tasks/main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% highlight yaml %}
{% raw %}&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;name: &amp;ldquo;Install Packages&amp;rdquo;
apt:
name: &amp;ldquo;{{ item }}&amp;rdquo;
state: present
loop: &amp;ldquo;{{ packages.to_install }}&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name: &amp;ldquo;Configure New APP in HAProxy&amp;rdquo;
template:
src: haproxy.cfg.j2
dest: /etc/haproxy/haproxy.cfg
owner: root
group: root
mode: 0644
with_dict: &amp;ldquo;{{ new_app }}&amp;rdquo;
notify: &amp;ldquo;Apply new configuration for HAProxy&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name: &amp;ldquo;Set up high availability with Keepalived&amp;rdquo;
template:
src: keepalived.conf.j2
dest: /etc/keepalived/keepalived.conf
owner: root
group: root
mode: 0644
notify: &amp;ldquo;Apply new configuration for Keepalived&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name: &amp;ldquo;Inicialize systemd services&amp;rdquo;
systemd:
name: &amp;ldquo;{{ item }}&amp;rdquo;
state: started
enabled: yes
loop: &amp;ldquo;{{ services.to_enable }}&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% endraw %}
{% endhighlight %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;handlers---mainyaml&#34;&gt;&lt;strong&gt;handlers - main.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esse arquivo armazena as tasks handlers. Essas tasks só serão executadas caso tenha alguma
modificação nas configurações que o ansible aplicar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/haproxy/handlers/main.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Apply new configuration for HAProxy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: haproxy
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: restarted

- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Apply new configuration for Keepalived&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: keepalived
    &lt;span style=&#34;font-weight:bold&#34;&gt;state&lt;/span&gt;: restarted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;templates&#34;&gt;&lt;strong&gt;templates&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Com base nesses arquivos templates(modelo) o ansible cria os arquivos de configuração do HAProxy
e do Keepalived dinamicamente, ou seja, toda alteração que for feita nesses arquivos será aplicada
em ambos os servidores.&lt;/p&gt;
&lt;p&gt;Com isso conseguimos trabalhar de forma idempotente.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;haproxycfgj2&#34;&gt;&lt;strong&gt;haproxy.cfg.j2&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/haproxy/templates/haproxy.cfg.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% highlight jinja %}
{% raw %}&lt;/p&gt;
&lt;p&gt;global
ulimit-n 100042
maxconn     4000
daemon&lt;/p&gt;
&lt;h1 id=&#34;turn-on-stats-unix-socket&#34;&gt;turn on stats unix socket&lt;/h1&gt;
&lt;p&gt;stats socket /var/lib/haproxy/stats mode 0600 level admin&lt;/p&gt;
&lt;h3 id=&#34;defaults&#34;&gt;Defaults&lt;/h3&gt;
&lt;p&gt;defaults
log global
{% if haproxy_mode == &amp;ldquo;layer_7&amp;rdquo; %}
mode http
{% endif %}
option dontlognull
option http-server-close
option redispatch
retries 3
timeout http-request 10s
timeout queue 1m
timeout connect 10s
timeout client 1m
timeout server 1m
timeout http-keep-alive 10s
timeout check 10s
maxconn 3000&lt;/p&gt;
&lt;h3 id=&#34;stats&#34;&gt;Stats&lt;/h3&gt;
&lt;p&gt;listen  stats
bind *:9000
stats enable
stats realm Haproxy\ Statistics
stats uri /haproxy_stats
stats auth admin:password
stats refresh 30
stats show-node
mode http&lt;/p&gt;
&lt;p&gt;{% if haproxy_mode == &amp;ldquo;layer_7&amp;rdquo; %}
frontend app
log /dev/log local0 debug
bind *:80
reqadd X-Forwarded-Proto:\ http&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;acl&#34;&gt;ACL&lt;/h1&gt;
&lt;p&gt;{% for acl, app in new_app.items() %}
acl {{ acl }} hdr(host) -i {{ acl }}.{{ my_domain }}
{% endfor %}&lt;/p&gt;
&lt;p&gt;{% for acl, app in new_app.items() %}
use_backend app-{{ app.name }} if {{ acl }}
{% endfor %}&lt;/p&gt;
&lt;p&gt;{% for acl, app in new_app.items() %}
backend app-{{ app.name }}
balance {{ balance_algorithm }}
mode    http
option httpchk HEAD /
{% for host_name, ip_addr in app.backend.items() %}
server {{ host_name }} {{ ip_addr }}:{{ app.port_back }} check
{% endfor %}&lt;/p&gt;
&lt;p&gt;{% endfor %}
{% endif %}&lt;/p&gt;
&lt;p&gt;{% if haproxy_mode == &amp;ldquo;layer_4&amp;rdquo; %}
{% for acl, app in new_app.items() %}&lt;/p&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;
&lt;h3 id=&#34;app--appname-&#34;&gt;app-{{ app.name }}&lt;/h3&gt;
&lt;p&gt;frontend app-{{ app.name }}
log /dev/log local0 debug
bind *:{{ app.port_front }}
default_backend app-{{ app.name }}&lt;/p&gt;
&lt;p&gt;backend app-{{ app.name }}
balance {{ balance_algorithm }}
mode    tcp
{% for host_name, ip_addr in app.backend.items() %}
server {{ host_name }} {{ ip_addr }}:{{ app.port_back }} check
{% endfor %}&lt;/p&gt;
&lt;p&gt;{% endfor %}
{% endif %}&lt;/p&gt;
&lt;p&gt;{% endraw %}
{% endhighlight %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;keepalivedconfj2&#34;&gt;&lt;strong&gt;keepalived.conf.j2&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim roles/haproxy/templates/keepalived.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% highlight jinja %}
{% raw %}&lt;/p&gt;
&lt;p&gt;vrrp_script chk_haproxy {
script &amp;ldquo;/usr/bin/killall -0 haproxy&amp;rdquo;  # check the haproxy process
interval 2 # every 2 seconds
weight 2 # add 2 points if OK
}&lt;/p&gt;
&lt;p&gt;vrrp_instance VI_1 {
interface ens32 # interface to monitor
{% if inventory_hostname == haproxy_master %}
state MASTER # MASTER on ha1, BACKUP on ha2
{% else %}
state BACKUP # MASTER on ha1, BACKUP on ha2
{% endif -%}
virtual_router_id 51
{% if inventory_hostname == haproxy_master %}
priority 101 # 101 on ha1, 100 on ha2
{% else %}
priority 100 # 101 on ha1, 100 on ha2
{% endif -%}
advert_int 1
unicast_src_ip {{ ansible_host }}
virtual_ipaddress {
{{ virtual_ipaddress }} # virtual ip address
}
track_script {
chk_haproxy
}
}&lt;/p&gt;
&lt;p&gt;{% endraw %}
{% endhighlight %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;playbook---haproxyyaml&#34;&gt;&lt;strong&gt;playbook - haproxy.yaml&lt;/strong&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Playbook que será utilizado pelo ansible para aplicar a role de configuração do HAProxy e Keepalived.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim ansible-haproxy/haproxy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
- &lt;span style=&#34;font-weight:bold&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Configure a new infraestructure HAProxy HA with Keepalived&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;font-weight:bold&#34;&gt;hosts&lt;/span&gt;:
    - haproxy

  &lt;span style=&#34;font-weight:bold&#34;&gt;roles&lt;/span&gt;:
    - {&lt;span style=&#34;font-weight:bold&#34;&gt;role: haproxy, tags&lt;/span&gt;: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;haproxy&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No final a estrutura de diretórios e arquivos fica assim.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tree -L 5 ansible-haproxy

ansible-haproxy
├── haproxy.yaml
├── inventory
│   ├── group_vars
│   │   ├── all.yaml
│   │   └── haproxy.yaml
│   └── inventory.ini
└── roles
    └── haproxy
        ├── handlers
        │   └── main.yaml
        ├── tasks
        │   └── main.yaml
        └── templates
            ├── haproxy.cfg.j2
            └── keepalived.conf.j2

7 directories, 8 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img18.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A configuração aplicada pelo ansible não será alterada até que você modifique. Idempotência :ˆD!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img19.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/YSZurkMW024&#34; title=&#34;haproxy ha with keepalived automate ansible&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/YSZurkMW024/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Mesmo em uma infraestrutura on-premise é possível trabalhar com soluções simples e robustas. A principio parece trabalhoso codificar tudo isso, mas, quando você estiver trabalhando com dezenas ou até centenas de hosts o cenário é totalmente favorável.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projeto:&lt;/strong&gt; &lt;a href=&#34;https://github.com/fabianoflorentino/ansible-haproxy&#34;&gt;https://github.com/fabianoflorentino/ansible-haproxy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatizando a instalação do CentOS com Kickstart</title>
      <link>https://fabianoflorentino.github.io/posts/2019-12-27-automacao/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2019-12-27-automacao/</guid>
      <description>&lt;p&gt;No meu primeiro artigo demonstro como automatizar a criação de máquinas virtuais no VMware com terraform e no processo utilizo uma ISO CentOS automatizada com kickstart.&lt;/p&gt;
&lt;p&gt;Mesmo automatizando a criação da máquina virtual ainda ficamos presos ao processo  de instalação do sistema operacional, então, precisamos criar um processo parcial ou totalmente automatizado para ganharmos a agilidade no processo de entrega.&lt;/p&gt;
&lt;p&gt;Fazar a entrega totalmente automatizada do processo de criação da máquina virtual e instalação do sistema operacional.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Para esse exemplo vou utilizar a imagem do CentOS 7.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma máquina virtual com o CentOS já instalado.&lt;/li&gt;
&lt;li&gt;ISO: &lt;a href=&#34;http://ftp.unicamp.br/pub/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso&#34;&gt;CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pacotes&#34;&gt;&lt;strong&gt;Pacotes&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Já no host/vm vamos instalar os pacotes necessários para criar a ISO.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum install -y rsync createrepo genisoimage system-config-kickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;diretórios&#34;&gt;&lt;strong&gt;Diretórios&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Precisamos criar uma estrutura de diretórios para colocar os arquivos da ISO.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p build_iso/isolinux/{images,ks,LiveOS,Packages,postinstall}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isolinux:&lt;/strong&gt; diretório central com o conteúdo da iso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images:&lt;/strong&gt; diretório com a imagem efiboot.img para inicializar a iso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ks:&lt;/strong&gt; diretório do arquivo ks.cfg, arquivo que iremos customizar para automatizar a instalação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LiveOS:&lt;/strong&gt; diretório com a imagem squashfs.img para filesystem temporário da iso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packages:&lt;/strong&gt; diretório com os pacotes que serão instalados durante o processo de deploy do SO e
também os pacotes adicionais.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;postinstall:&lt;/strong&gt; diretório para incluir tudo que você precisa que seja feito depois da instalação do SO.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iso-centos&#34;&gt;&lt;strong&gt;ISO CentOS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Download da image iso do CentOS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget http://ftp.unicamp.br/pub/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Precisamos montar a ISO para termos acesso aos arquivos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p /mnt/iso
mount -o loop CentOS-7-x86_64-Minimal-1908.iso /mnt/iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img8.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;copiando-arquivos&#34;&gt;&lt;strong&gt;Copiando Arquivos&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Preciamos copiar os arquivos para criar a iso corretamente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;rsync -av /mnt/iso/.discinfo /root/build_iso/isolinux/
rsync -av /mnt/iso/isolinux/ /root/build_iso/isolinux/
rsync -av /mnt/iso/images/ /root/build_iso/isolinux/images/
rsync -av /mnt/iso/Packages/ /root/build_iso/isolinux/Packages/
rsync -av /mnt/iso/LiveOS/ /root/build_iso/isolinux/LiveOS/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img9.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Para o processo de instalação identificar quais os pacotes serão instalados, precisamos copiar o arquivo &lt;strong&gt;comps.xml&lt;/strong&gt;. Esse arquivo está compactado dentro do diretório &lt;strong&gt;/mnt/isolinux/repodata&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img10.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cp /mnt/iso/repodata/4af1fba0c1d6175b7e3c862b4bddfef93fffb84c37f7d5f18cfbff08abc47f8a-c7-x86_64-comps.xml.gz /root/build_iso/comps.xml.gz

cd /root/build_iso/
gunzip comps.xml.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img11.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pacotes-adicionais&#34;&gt;&lt;strong&gt;Pacotes Adicionais&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Seguindo a idéia de automação, podemos adicionar pacotes na ISO para que sejam
instalados durante o processo de instalação do SO.
Para isso vamos fazer criar um diretório e fazer o download dos pacotes necessários.
Para esse exemplo vamos usar os seguintes pacotes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epel-release&lt;/li&gt;
&lt;li&gt;net-tools&lt;/li&gt;
&lt;li&gt;bind-utils&lt;/li&gt;
&lt;li&gt;nfs-utils&lt;/li&gt;
&lt;li&gt;yum-utils&lt;/li&gt;
&lt;li&gt;libxml2-python&lt;/li&gt;
&lt;li&gt;nc&lt;/li&gt;
&lt;li&gt;nmap&lt;/li&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;rsync&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;tree&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;open-vm-tools
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Esse pacote é necessário se você estiver usando o VMware como virtualizador padrão.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p /root/custom_packages
cd /root/custom_packages
yum install --downloadonly --downloaddir=. &amp;lt;NOME DO PACOTE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img12.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Precisamos sincronizar esses novos &lt;strong&gt;rpms&lt;/strong&gt; com o diretório Packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;rsync -av /root/custom_packages/ /root/build_iso/isolinux/Packages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img13.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sincronizar-o-repositório-de-pacotes&#34;&gt;&lt;strong&gt;Sincronizar o repositório de pacotes&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Lembra do arquivo comps.xml, é ele que vamos sincronizar agora para criar a lista
atualizada de pacotes que serão instalados no processo de instalação do SO.&lt;/p&gt;
&lt;p&gt;Dentro do diretório &lt;strong&gt;/root/build_iso/isolinux&lt;/strong&gt; execute o processo abaixo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd /root/build_iso/isolinux
createrepo -g ../comps.xml .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img14.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;kickstart&#34;&gt;&lt;strong&gt;Kickstart&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Até o momento estavamos preparando tudo até chegar aqui. Nesse arquivo que determinamos
como a instalação do sistema operacional vai acontecer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim /root/build_iso/isolinux/ks/ks.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# version=DEVEL&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# System authorization information&lt;/span&gt;
auth --enableshadow --passalgo=sha512

&lt;span style=&#34;font-style:italic&#34;&gt;# Use CDROM installation media&lt;/span&gt;
cdrom

&lt;span style=&#34;font-style:italic&#34;&gt;# Use graphical install&lt;/span&gt;
install
text

&lt;span style=&#34;font-style:italic&#34;&gt;# Run the Setup Agent on first boot&lt;/span&gt;
firstboot --enable
ignoredisk --only-use=sda

&lt;span style=&#34;font-style:italic&#34;&gt;# Keyboard layouts&lt;/span&gt;
keyboard --vckeymap=us-alt-intl --xlayouts=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;us (alt-intl)&amp;#39;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# System language&lt;/span&gt;
lang en_US.UTF-8

&lt;span style=&#34;font-style:italic&#34;&gt;# Network information&lt;/span&gt;
network --onboot=yes --bootproto=dhcp --device=eth0 --noipv6 --activate --hostname=centos

&lt;span style=&#34;font-style:italic&#34;&gt;# Root password&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# O valor que está encriptado é o mesmo valor que está no arquivo /etc/shadow, veja na imagem abaixo.&lt;/span&gt;
rootpw --iscrypted &amp;lt;SHADOW PASSWORD&amp;gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# System services&lt;/span&gt;
services --disabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;chronyd&amp;#34;&lt;/span&gt;
services --enabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;NetworkManager&amp;#34;&lt;/span&gt;
services --enabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;
services --enabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vmtoolsd&amp;#34;&lt;/span&gt;

selinux --disabled
firewall --disabled

&lt;span style=&#34;font-style:italic&#34;&gt;# System timezone&lt;/span&gt;
timezone America/Sao_Paulo --isUtc --nontp

&lt;span style=&#34;font-style:italic&#34;&gt;# Custom User&lt;/span&gt;
&lt;span style=&#34;font-style:italic&#34;&gt;# O valor que está encriptado é o mesmo valor que está no arquivo /etc/shadow, veja na imagem abaixo.&lt;/span&gt;
user --groups=wheel --name=automation --password=&amp;lt;SHADOW PASSWORD&amp;gt; --iscrypted --gecos=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;automation&amp;#34;&lt;/span&gt;

&lt;span style=&#34;font-style:italic&#34;&gt;# System bootloader configuration&lt;/span&gt;
bootloader --append=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34; crashkernel=auto net.ifnames=0 biosdevname=0&amp;#34;&lt;/span&gt; --location=mbr --boot-drive=sda

&lt;span style=&#34;font-style:italic&#34;&gt;# Partition clearing information&lt;/span&gt;
clearpart --all

&lt;span style=&#34;font-style:italic&#34;&gt;# Disk partitioning information&lt;/span&gt;
part pv.296 --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;lvmpv&amp;#34;&lt;/span&gt; --ondisk=sda --size=47107
part /boot --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --ondisk=sda --size=512 --label=boot
volgroup centos --pesize=4096 pv.296
logvol /var  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt; --name=var --vgname=centos
logvol /opt  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --name=opt --vgname=centos
logvol /home  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt; --name=home --vgname=centos
logvol /  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt; --name=root --vgname=centos
logvol /var/log  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;var_log&amp;#34;&lt;/span&gt; --name=var_log --vgname=centos
logvol /tools  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --name=tools --vgname=centos
logvol swap  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;swap&amp;#34;&lt;/span&gt; --size=1024 --name=swap --vgname=centos

reboot

%packages
@^minimal
@core
kexec-tools
epel-release
net-tools
bind-utils
nfs-utils
yum-utils
libxml2-python
nc
nmap
wget
rsync
curl
tree
tmux
htop
vim
open-vm-tools
%end

%addon com_redhat_kdump --enable --reserve-mb=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;

%end

%post --log=/root/ks-post.log
systemctl restart network
dhclient
yum -y update
%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img15.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Acho que não preciso avisar que isso é um arquivo privado e que você precisa
ter muito cuidado com ele hehehe, aqui estamos em um ambiente controlado, muita
cautela ao manipular essas strings ok? :^D&lt;/p&gt;
&lt;h3 id=&#34;pontos-de-destaque&#34;&gt;&lt;strong&gt;Pontos de destaque&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# Use graphical install&lt;/span&gt;
install
text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Determina como será inicializado o wizard da ISO, no caso, no modo texto.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# Keyboard layouts&lt;/span&gt;
keyboard --vckeymap=us-alt-intl --xlayouts=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;us (alt-intl)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Layout do teclado que será configurado por padrão no SO.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# Network information&lt;/span&gt;
network  --bootproto=dhcp --device=ens32 --noipv6 --activate
network  --hostname=centos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Configuração inicial da interface de rede.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# System services&lt;/span&gt;
services --disabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;chronyd&amp;#34;&lt;/span&gt;
services --disabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;NetworkManager&amp;#34;&lt;/span&gt;
services --enabled=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;

selinux --disabled
firewall --disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Serviços que serão inicializados ou parados na inicialização do SO.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# System bootloader configuration&lt;/span&gt;
bootloader --append=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34; crashkernel=auto net.ifnames=0 biosdevname=0&amp;#34;&lt;/span&gt; --location=mbr --boot-drive=sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Aqui com os parametros &lt;strong&gt;net.ifnames=0&lt;/strong&gt; e &lt;strong&gt;biosdevname=0&lt;/strong&gt; &amp;ldquo;forçamos&amp;rdquo; que a interface de rede
fique com o nome &lt;strong&gt;eth0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;# Partition clearing information&lt;/span&gt;
clearpart --none --initlabel

&lt;span style=&#34;font-style:italic&#34;&gt;# Disk partitioning information&lt;/span&gt;
part pv.296 --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;lvmpv&amp;#34;&lt;/span&gt; --ondisk=sda --size=47107
part /boot --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --ondisk=sda --size=512 --label=boot
volgroup centos --pesize=4096 pv.296
logvol /var  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt; --name=var --vgname=centos
logvol /opt  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --name=opt --vgname=centos
logvol /home  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt; --name=home --vgname=centos
logvol /  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=10240 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt; --name=root --vgname=centos
logvol /var/log  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --label=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;var_log&amp;#34;&lt;/span&gt; --name=var_log --vgname=centos
logvol /tools  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;xfs&amp;#34;&lt;/span&gt; --size=5120 --name=tools --vgname=centos
logvol swap  --fstype=&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;swap&amp;#34;&lt;/span&gt; --size=1024 --name=swap --vgname=centos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Aqui determinamos como será partifionado o HD/SSD da máquina.
A atenção aqui é que o HD/SSD usado na instalação não pode ser menor que o
determinado aqui. Nesse exemplo o tamanho minimo do HD/SSD é de 50GB.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;%packages --ignoremissing
@^minimal
@core
kexec-tools
epel-release
net-tools
bind-utils
nfs-utils
yum-utils
libxml2-python
nc
nmap
wget
rsync
curl
tree
tmux
htop
vim
open-vm-tools
%end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Pacotes que adicionais que serão instalados junto com o SO.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ksvalidator&#34;&gt;&lt;strong&gt;ksvalidator&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Depois de configurado o arquivo &lt;strong&gt;ks.cfg&lt;/strong&gt; temos como validar se a sintaxe do arquivo está certa.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ksvalidator build_iso/isolinux/ks/ks.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Caso não apareça nenhuma mensagem o arquivo está validado.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img16.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;inicialização&#34;&gt;&lt;strong&gt;Inicialização&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Precisamos configurar a inicialização da iso apontando para o arquivo &lt;strong&gt;ks.cfg&lt;/strong&gt; que configuramos.
No arquivo &lt;strong&gt;build_iso/isolinux/isolinux.cfg&lt;/strong&gt; por volta da linha 61 preciamos criar a entrada para o arquivo &lt;strong&gt;ks.cfg&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim build_iso/isolinux/isolinux.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;na opção &lt;strong&gt;timeout&lt;/strong&gt; determinamos quanto tempo a tela inicial de instalação irá aguardar antes de inicar com a opção padrão.&lt;/p&gt;
&lt;p&gt;Em nosso processo vamos colocar 1 para inicializar imediatamente após boot pela ISO.
Por volta da linha 61 configure a entrada apontando para o arquivo &lt;strong&gt;ks.cfg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;De:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;label linux
  menu label ^Install CentOS 7
  kernel vmlinuz
  append initrd=initrd.img inst.stage2=hd:LABEL=CentOS&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\x&lt;/span&gt;207&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\x&lt;/span&gt;20x86_64 quiet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Para:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;label linux
  menu label ^Install CentOS 7
  menu default
  kernel vmlinuz
  kernel vmlinuz biosdevname=0
  append initrd=initrd.img ks=cdrom:/ks/ks.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;criando-a-iso-customizada&#34;&gt;&lt;strong&gt;Criando a ISO Customizada&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Dentro da pasta &lt;strong&gt;/root/build_iso&lt;/strong&gt; execute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkisofs -o centos7-custom-img-disk50gb-v0.0.1.iso -b isolinux.bin -c boot.cat -no-emul-boot -V &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;CentOS 7 x86_64&amp;#39;&lt;/span&gt; -boot-load-size 4 -boot-info-table -R -J -v -T isolinux/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se todo processo ocorreu como o esperado, será gerado a nossa ISO cutomizada.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img17.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/sGVBLqubTWI&#34; title=&#34;Automation Install CentOS&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/sGVBLqubTWI/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Seguindo a linha do artigo anterior sobre automaçao em infraestrutura tradicional.
Aqui também tempos uma maneira de muitas, de automatizar a instalação de uma SO. Junto
com o artigo anterior temos uma entrega totalmente automatizada de máquina virtual
mais sistema operacional.
Uma outra ferramenta que pode ser usada é o &lt;strong&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;Packer&lt;/a&gt;&lt;/strong&gt; da Hashicorp, futuramente escrevo
fazendo um paralelo entre os dois métodos.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Ah! quase ia esquecendo, fazer uma menção muito relevante aqui para o &lt;a href=&#34;https://www.linkedin.com/in/glaucovilas/&#34;&gt;Glauco Vilas&lt;/a&gt; pois o artigo está baseado no material que ele escreveu internamentte aqui para a nossa equipe, vlw &lt;a href=&#34;https://www.linkedin.com/in/glaucovilas/&#34;&gt;Glauco Vilas&lt;/a&gt;!!!&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando VM’s no VMware ESXi com Terraform</title>
      <link>https://fabianoflorentino.github.io/posts/2019-12-21-terraform/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.github.io/posts/2019-12-21-terraform/</guid>
      <description>&lt;p&gt;No Brasil ainda temos muitas empresas com o modelo tradicional de infraestrutura, com seus datacenters próprios ou no modelo de comodato em datacenters compartilhados, com isso é comum ver parques de servidores usando virtualizadores para aproveitar melhor os recursos disponíveis.&lt;br&gt;
Muitos sysadmins ainda usam a forma tradicional de criar novas máquinas, utilizam o dashboard web seguindo o wizard e com isso tomando muito tempo para concluir esse processo.&lt;/p&gt;
&lt;p&gt;Os virtualizadores mais modernos hoje em dia como o VMware ESXi disponibilizam API&amp;rsquo;s que podemos utilizar para automatizar o processo de criação de máquinas virtuais ou qualquer recurso disponível.
Hoje a ferramenta mais utilizada para automatizar a criação desses recursos é Terraform.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Servidor VMware ESXi&lt;/li&gt;
&lt;li&gt;Usuário com perfil administrativo&lt;br&gt;
&lt;strong&gt;OBS:&lt;/strong&gt; Para utilizar a API do ESXi é preciso ter um servidor licenciado ou com a licença trial de 60 dias. Você pode utilizar a versão Free mas não da acesso á API.&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;instalação-do-terraform&#34;&gt;&lt;strong&gt;Instalação do Terraform&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;O Terraform está disponível para Windows Linux e macOS. A documentação da Hashicorp é muito boa, então vou deixar abaixo as informações da documentação para fazer a instalação.&lt;/p&gt;
&lt;p&gt;Clique na imagem abaixo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.hashicorp.com/terraform/getting-started/install.html?wvideo=ppy8fwglnp&#34; title=&#34;Terraform Install&#34;&gt;&lt;img src=&#34;../../images/img2.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;terraform-init&#34;&gt;&lt;strong&gt;Terraform init&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com o terraform instalado, precisamos inicializar o terraform com o provider vSphere para acesso ao ESXi, para isso precisamos criar o diretório dos arquivos terraform. O primeiro arquivo terraform que precisa ser criado é o que contém as informações do provider que vamos usar.
O arquivo pode ter qualquer nome desde que tenha a extensão .tf, aqui vou chamar de &lt;strong&gt;provider.tf&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere&amp;#34;&lt;/span&gt; {
  vsphere_server        = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;HOST&amp;#34;&lt;/span&gt;
  user                  = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;USUARIO&amp;#34;&lt;/span&gt;
  password              = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;SENHA&amp;#34;&lt;/span&gt;
  allow_unverified_ssl  = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Com o arquivo criado, é preciso inicializar o terraform para que ele baixe o provider do vSphere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img6.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;arquivos-terraform&#34;&gt;&lt;strong&gt;Arquivos Terraform&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;varstf&#34;&gt;&lt;strong&gt;vars.tf&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;É preciso configurar algumas variáveis para que o terraform consiga se comunicar com os recursos do ESXi e também para que as máquinas virtuais sejam criadas corretamente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data_center&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;ha-datacenter&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data_store&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data-vol-1&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;mgmt_lan&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;VM Network&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;net_adapter_type&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vmxnet3&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;guest_id&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;centos7_64Guest&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;custom_iso_path&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;iso/centos7-custom-img-disk50gb-v0.0.3.iso&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;name_new_vm&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Input a name for Virtual Machine Ex. new_vm&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vm_count&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Number of instaces&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;disk_size&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of Disk, Ex. 50, 60, 70 OBS: The amount may not be less than 50&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;num_cpus&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of vCPU’s, Ex. 2&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;num_mem&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of Memory, Ex. 1024, 2048, 3073, 4096&amp;#34;&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;instancetf&#34;&gt;&lt;strong&gt;instance.tf&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aqui a mágica acontece, nesse arquivo vamos colocar os recursos para criação das máquinas virtuais.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_datacenter&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;datacenter&amp;#34;&lt;/span&gt; {
  name = var.data&lt;span style=&#34;&#34;&gt;_&lt;/span&gt;center
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_datastore&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;datastore&amp;#34;&lt;/span&gt; {
  name          = var.data&lt;span style=&#34;&#34;&gt;_&lt;/span&gt;store
  datacenter_id = data.vsphere_datacenter.datacenter.id
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_resource_pool&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;pool&amp;#34;&lt;/span&gt; {}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_network&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;networking&amp;#34;&lt;/span&gt; {
  name          = var.mgmt_lan
  datacenter_id = data.vsphere_datacenter.datacenter.id
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_virtual_machine&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;virtualmachine&amp;#34;&lt;/span&gt; {
  count                      = var.vm_count
  name                       = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;var.name_new_vm&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;count.index + 1&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
  resource_pool_id           = data.vsphere_resource_pool.pool.id
  datastore_id               = data.vsphere_datastore.datastore.id
  force_power_off            = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  shutdown_wait_timeout      = 1
  num_cpus                   = var.num_cpus
  memory                     = var.num_mem
  wait_for_guest_net_timeout = 0
  guest_id                   = var.guest_id
  nested_hv_enabled          = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  
  network_interface {
    network_id   = data.vsphere_network.networking.id
    adapter_type = var.net_adapter_type
  }
  
  cdrom {
    datastore_id = data.vsphere_datastore.datastore.id
    path         = var.custom_iso_path
  }
  disk {
    size             = var.disk_size
    label            = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;first-disk.vmdk&amp;#34;&lt;/span&gt;
    eagerly_scrub    = &lt;span style=&#34;font-weight:bold&#34;&gt;false&lt;/span&gt;
    thin_provisioned = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resources&#34;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vsphere_datacenter:&lt;/strong&gt; Nome do datacenter que foi configurado dentro do vCenter/vSphere, por padrão o nome que vem configurado é ha-datacenter, esse informação você consegue na cli do ESXi.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_datastore:&lt;/strong&gt; storage/compartilhamento onde serão provisionados os arquivos e discos das máquinas virtuais que serão criadas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_resource_pool:&lt;/strong&gt; Pool de recursos criado para as máquinas virtuais.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_network:&lt;/strong&gt; Nome da network que as máquinas virtuais usarão para ter comunição com a rede interna e externa do seu datacenter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_virtual_machine:&lt;/strong&gt; Cria de fato as máquinas virtuais, aqui fica especificado como as máquinas serão criadas. Os pontos relevantes nesse resource é a quantidade de máquinas, nome, quantidade de vCPU, memória, disco, network utilizada pela vm e o tipo de instalação que será utilizado para criar a máquina, nesse exemplo estou utilizando uma ISO customizada e automatizada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essas informações estão de forma customizada no arquivo &lt;strong&gt;vars.tf&lt;/strong&gt;, com isso no momento do planejamento do provisionamento com terraform um questionário será solicitado, abaixo segue o exemplo.&lt;/p&gt;
&lt;h3 id=&#34;terraform-plan&#34;&gt;&lt;strong&gt;terraform plan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Com os arquivos configurados podemos criar o plano de execução do terraform.
Um recurso muito legal que o terraform oferece é de entrada de dados, a forma como as varáveis foram configuradas no arquivo &lt;strong&gt;vars.tf&lt;/strong&gt; permite criar esse questionário para passar as informações necessárias para criação da(s) máquinas virtuais como disco, memória, vcpu, nome e quantidade.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
~]$ terraform plan --out deploy-vm.tfplan

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img3.png&#34; alt=&#34; &lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ao final do plan ele mostra a quantidade de recursos será criado, no exemplo serão 3 máquinas virtuais.
Definido o plan, é só aplicar as configurações para que os recursos sejam criados&lt;/p&gt;
&lt;h3 id=&#34;terraform-apply&#34;&gt;&lt;strong&gt;terraform apply&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
~]$ terraform apply deploy-vm.tfplan

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img4.png&#34; alt=&#34; &lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7QFKUhcVSEg&#34; title=&#34;Terraform + VMware&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/7QFKUhcVSEg/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A intenção do artigo é mostrar uma das muitas formas de se automatizar a infraestrutura tradicional que ainda existe no cenário das empresas brasileiras.
O &amp;ldquo;boom&amp;rdquo; dos provedores de Cloud ainda é recente e as empresas estão migrando com bastante cautela e muitas ainda estão planejando a migração, então, isso leva tempo e mesmo assim as empresas não param de crescer e aumentar a demanda dos produtos oferecidos.
A administração de sistemas tradicional existe mas com automação ela deve ser mais eficiente para acompanhar esse constante crescimento.&lt;/p&gt;
&lt;h3 id=&#34;referências&#34;&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/fabianoflorentino/terraform-vmware.git&#34;&gt;Arquivos utilizados&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Terraform:&lt;/strong&gt; &lt;a href=&#34;https://www.terraform.io/docs/providers/vsphere/index.html&#34;&gt;Documentação&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
