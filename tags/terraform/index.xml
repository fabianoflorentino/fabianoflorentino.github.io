<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Fabiano Florentino</title>
    <link>https://fabianoflorentino.codar.info/tags/terraform/</link>
    <description>Recent content in terraform on Fabiano Florentino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fabianoflorentino.codar.info/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entregando VM&#39;s no VMware vCenter/vSphere com o Jenkins</title>
      <link>https://fabianoflorentino.codar.info/posts/2021-03-21-jenkins/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.codar.info/posts/2021-03-21-jenkins/</guid>
      <description>&lt;p&gt;Olá pessoal, depois de muito tempo estou de volta!&lt;/p&gt;
&lt;p&gt;No meu primeiro artigo, expliquei e demonstrei como criar máquinas no vCenter/vSphere
usando terraform, e que tal entregar essas máquinas virtuais dentro de um pipeline como se
fosse um aplicativo?&lt;/p&gt;
&lt;p&gt;Não é de hoje que tudo está se convergindo para Cloud Computing e de fato esse parece ser o futuro.
Mas ainda temos o meio do caminho, muitas empresas utilizam parte da sua infraestrutura em datacenters,
migrando e ou utilizando esse dois mundo em uma abordagem de Cloud Hibrida que acaba fazendo parte do
negócio.&lt;/p&gt;
&lt;p&gt;Bom deixando a história de lado bora colocar a mão na massa!&lt;/p&gt;
&lt;p&gt;Nesse artigo vou utilizar o Jenkins para criar o pipeline de entrega dessas máquinas virtuais.
Porque o Jenkins? Ele ainda é um dos serviços de CI/CD mais conhecidos, acredito que todo mundo que usa
uma solução mais moderna, tenha pelo menos passado por ele, acho que ainda é valido conhece-lo. Existem
grandes empresas que o utilizam e muito bem, com abordagens bem bacanas. o iFood é uma dessas empresas.
No TDC do ano passado o pessoal demonstrou um uso de caso que inclusive inspirou esse artigo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eventials.com/Globalcode/https-www-eventials-com-globalcode-tdc-sp-2019-stadium-sexta-2&#34;&gt;IaaC - Autonomia, rastreabilidade, agilidade com Terraform e Pipeline - Diego Ragazzi / Smailli Moraes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;jenkins&#34;&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Para esse artigo vamos usar uma versão em container do Jenkins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull jenkins/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img29.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Junto do Jenkins precisamos de instalar terraform&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -it -d --name jenkins -p 8080:8080 -p 50000:50000 jenkins/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins mkdir /var/jenkins_home/extras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker cp terraform jenkins:/var/jenkins_home/extras/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins /var/jenkins_home/extras/terraform --version
Terraform v0.12.24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img30.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Vamos pegar a senha inicial para inicializar o jenkins&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Abaixo segue o setup inicial do Jenkins até sua tela inicial.&lt;/p&gt;
&lt;h3 id=&#34;unlock-jenkins&#34;&gt;&lt;strong&gt;Unlock Jenkins&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img31.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;customize-jenkins&#34;&gt;&lt;strong&gt;Customize Jenkins&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img32.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img33.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-first-admin-user&#34;&gt;&lt;strong&gt;Create First Admin User&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img34.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;instance-configuration&#34;&gt;&lt;strong&gt;Instance Configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img35.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jenkins-is-ready&#34;&gt;&lt;strong&gt;Jenkins is Ready!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img36.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jenkins-dashboard&#34;&gt;&lt;strong&gt;Jenkins Dashboard&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img37.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;job&#34;&gt;&lt;strong&gt;JOB&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Aqui a mágica acontece, vamos criar o pipeline para fazer o deploy da nossa VM.&lt;/p&gt;
&lt;h3 id=&#34;novo-job&#34;&gt;&lt;strong&gt;Novo job&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img38.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img39.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Não vou entrar no detalhe de cada parametro do pipeline, vou direto a criação do pipeline.
Com calma, leia cada parametro entenda se faz sentido para o seu uso.&lt;/p&gt;
&lt;p&gt;Selecione a opção &lt;code&gt;Este build é parametrizado&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img40.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;parametros&#34;&gt;&lt;strong&gt;Parametros&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Para esse exemplo temos parametros iniciais para criar uma máquina virtual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nome da máquina&lt;/li&gt;
&lt;li&gt;Quantidade de máquinas&lt;/li&gt;
&lt;li&gt;Número de processadores&lt;/li&gt;
&lt;li&gt;Número de memória&lt;/li&gt;
&lt;li&gt;Tamanho do disco para instalação do SO.
&lt;strong&gt;OBS:&lt;/strong&gt; Para esse exemplo, estou usando o tamanho de 50 (50GB) por conta da customização do disco
feita no kickstart da imagem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img41.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img42.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img43.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img44.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img45.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img57.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pipeline&#34;&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Ainda no job, vamos configurar o projeto que ira fazer o deploy da(s) máquinas virtuais.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Definição: Pipeline script from SCM&lt;/li&gt;
&lt;li&gt;SCM: Git&lt;/li&gt;
&lt;li&gt;Repositories&lt;/li&gt;
&lt;li&gt;Branches to build&lt;/li&gt;
&lt;li&gt;Script Path&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img46.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Em destaque temos o parametro &lt;code&gt;Script Path&lt;/code&gt; onde se encontra o arquivo &lt;code&gt;Jenkinsfile&lt;/code&gt;, ele
quem ira fazer todo o processo de deploy.&lt;/p&gt;
&lt;p&gt;Nesse exemplo existem duas variáveis &lt;code&gt;PROVIDER_USR&lt;/code&gt; e &lt;code&gt;PROVIDER_PSW&lt;/code&gt;, que são as informações que o terraform irá usar no módulo provider para acessar o vSphere/vCenter.&lt;/p&gt;
&lt;p&gt;Bom, vou tomar que você tenha um breve entendimento de segurança e entenda que estamos fazendo um exemplo e que estamos em um ambiente controlado, &lt;code&gt;POR FAVOR, NÃO USE ISSO EM PRODUÇÃO&lt;/code&gt; estude uma
forma mais segura ok?&lt;/p&gt;
&lt;p&gt;No próprio jenkins existe uma forma de você gerenciar arquivos de credenciais e senhas. Vamos utilizar a opção de texto secreto &lt;code&gt;Secret text&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img47.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img48.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img49.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img50.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img51.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img52.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img53.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img54.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img55.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Junto com a configuração de credencial do jenkins, no Jenkinsfile é preciso usar a seguinte função.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Essa função cria uma mascara aos caracteres no log do JOB em execução.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img56.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Eis a mágica! :^D&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;pipeline {
	agent {
        any {}
	}
	stages {
		stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Inicializando o Terraform&amp;#39;&lt;/span&gt;) {
			steps {
				script {
                    withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)]) {
                        sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;export TF_VAR_provider_user=${env.PROVIDER_USR} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_provider_password=${env.PROVIDER_PSW} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_name_new_vm=${env.NAME_NEW_VM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_vm_count=${env.VM_COUNT} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_num_cpus=${env.NUM_CPUS} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_num_mem=${env.NUM_MEM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; export TF_VAR_size_disk=${env.SIZE_DISK} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                        &amp;amp;&amp;amp; /var/jenkins_home/extras/terraform init \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;    					&amp;amp;&amp;amp; /var/jenkins_home/extras/terraform plan -out deploy.tfplan&amp;#34;&lt;/span&gt;
                    }
				}
			}
		}
        stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Construindo Maquina Virtual&amp;#39;&lt;/span&gt;) {
            steps {
                script {
                   &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;${env.TF_STATE}&amp;#34;&lt;/span&gt; == &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;APPLY&amp;#34;&lt;/span&gt;) {
                        timeout(time: 3, unit: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;MINUTES&amp;#34;&lt;/span&gt;) {
                            input(id: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;chooseOptions&amp;#39;&lt;/span&gt;, message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Criar a maquina virtual?&amp;#39;&lt;/span&gt;, ok: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Confirmar&amp;#39;&lt;/span&gt;)
                            script {
                                sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;/var/jenkins_home/extras/terraform apply deploy.tfplan&amp;#39;&lt;/span&gt;
                            }
                        }
                    }
                }
            }
        }
        stage (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Destruindo Maquina Virtual&amp;#39;&lt;/span&gt;) {
            steps {
                script {
                   &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;${env.TF_STATE}&amp;#34;&lt;/span&gt; == &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;DESTROY&amp;#34;&lt;/span&gt;) {
                        timeout(time: 3, unit: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;MINUTES&amp;#34;&lt;/span&gt;) {
                            input(id: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;chooseOptions&amp;#39;&lt;/span&gt;, message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Destruir a maquina virtual?&amp;#39;&lt;/span&gt;, ok: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Confirmar&amp;#39;&lt;/span&gt;)
                            script {
                                withCredentials([string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_USR&amp;#39;&lt;/span&gt;), string(credentialsId: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;, variable: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;PROVIDER_PSW&amp;#39;&lt;/span&gt;)]) {
                                    sh &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;export TF_VAR_provider_user=${env.PROVIDER_USR} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_provider_password=${env.PROVIDER_PSW} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_name_new_vm=${env.NAME_NEW_VM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_vm_count=${env.VM_COUNT} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_num_cpus=${env.NUM_CPUS} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_num_mem=${env.NUM_MEM} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                                    &amp;amp;&amp;amp; export TF_VAR_size_disk=${env.SIZE_DISK} \
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;                					&amp;amp;&amp;amp; /var/jenkins_home/extras/terraform destroy -auto-approve&amp;#34;&lt;/span&gt;
                                }
                            }
                        }
                    }
                }
            }
        }
	}
	post {
        success {
          slackSend (
              color: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;#088A29&amp;#39;&lt;/span&gt;,
              message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;:white_check_mark: SUCCESSFUL: Job &amp;#39;${env.JOB_NAME} [${env.BUILD_NUMBER}]&amp;#39; (${env.BUILD_URL})&amp;#34;&lt;/span&gt;)
        }

        failure {
          slackSend (
              color: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;#DF0101&amp;#39;&lt;/span&gt;,
              message: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;:rotating_light: FAILED: Job &amp;#39;${env.JOB_NAME} [${env.BUILD_NUMBER}]&amp;#39; (${env.BUILD_URL})&amp;#34;&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;construindo-e-ou-destruindo-sua-vm&#34;&gt;&lt;strong&gt;Construindo e ou Destruindo sua VM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Depois de realizar todas as configurações, vamos criar e ou destruir nossas máquinas virtuais.&lt;/p&gt;
&lt;p&gt;No projeto, vamos contruir &lt;code&gt;APPLY&lt;/code&gt; com parametros.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img58.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Confirme a criação ou destruição do ambiente.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img59.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img60.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Você também pode destruir(remover) as máquinas executando novamente o projeto selecionando o
&lt;code&gt;DESTROY&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img61.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Uma perfumaria que pode ser feita é o alerta no slack :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img63.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/SQTXTZx1e7s&#34; title=&#34;Entregando VM&#39;s no VMware vCenter/vSphere com o Jenkins&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/SQTXTZx1e7s/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A alguns anos atrás acredito que para a maioria dos Sysadmin&amp;rsquo;s(Ops), SRE&amp;rsquo;s, DevOps Engineer, não importa
o nome do cargo, criar um fluxo (pipeline) de entrega de infraestrutura seria inimaginavel. Esse foi uma pequena desmonstração do que pode ser feito, uma forte recomendação é ler a documentação do módulo &lt;a href=&#34;https://www.terraform.io/docs/providers/vsphere/index.html&#34;&gt;vSphere&lt;/a&gt; do terraform e conhecer outras configurações que podem ser aplicadas na sua infraestrutura.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projeto:&lt;/strong&gt; &lt;a href=&#34;https://github.com/fabianoflorentino/terraform-deploy-vm&#34;&gt;https://github.com/fabianoflorentino/terraform-deploy-vm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando VM’s no VMware ESXi com Terraform</title>
      <link>https://fabianoflorentino.codar.info/posts/2019-12-21-terraform/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fabianoflorentino.codar.info/posts/2019-12-21-terraform/</guid>
      <description>&lt;p&gt;No Brasil ainda temos muitas empresas com o modelo tradicional de infraestrutura, com seus datacenters próprios ou no modelo de comodato em datacenters compartilhados, com isso é comum ver parques de servidores usando virtualizadores para aproveitar melhor os recursos disponíveis.&lt;br&gt;
Muitos sysadmins ainda usam a forma tradicional de criar novas máquinas, utilizam o dashboard web seguindo o wizard e com isso tomando muito tempo para concluir esse processo.&lt;/p&gt;
&lt;p&gt;Os virtualizadores mais modernos hoje em dia como o VMware ESXi disponibilizam API&amp;rsquo;s que podemos utilizar para automatizar o processo de criação de máquinas virtuais ou qualquer recurso disponível.
Hoje a ferramenta mais utilizada para automatizar a criação desses recursos é Terraform.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Servidor VMware ESXi&lt;/li&gt;
&lt;li&gt;Usuário com perfil administrativo&lt;br&gt;
&lt;strong&gt;OBS:&lt;/strong&gt; Para utilizar a API do ESXi é preciso ter um servidor licenciado ou com a licença trial de 60 dias. Você pode utilizar a versão Free mas não da acesso á API.&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;instalação-do-terraform&#34;&gt;&lt;strong&gt;Instalação do Terraform&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;O Terraform está disponível para Windows Linux e macOS. A documentação da Hashicorp é muito boa, então vou deixar abaixo as informações da documentação para fazer a instalação.&lt;/p&gt;
&lt;p&gt;Clique na imagem abaixo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.hashicorp.com/terraform/getting-started/install.html?wvideo=ppy8fwglnp&#34; title=&#34;Terraform Install&#34;&gt;&lt;img src=&#34;../../images/img2.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;terraform-init&#34;&gt;&lt;strong&gt;Terraform init&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Com o terraform instalado, precisamos inicializar o terraform com o provider vSphere para acesso ao ESXi, para isso precisamos criar o diretório dos arquivos terraform. O primeiro arquivo terraform que precisa ser criado é o que contém as informações do provider que vamos usar.
O arquivo pode ter qualquer nome desde que tenha a extensão .tf, aqui vou chamar de &lt;strong&gt;provider.tf&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere&amp;#34;&lt;/span&gt; {
  vsphere_server        = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;HOST&amp;#34;&lt;/span&gt;
  user                  = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;USUARIO&amp;#34;&lt;/span&gt;
  password              = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;SENHA&amp;#34;&lt;/span&gt;
  allow_unverified_ssl  = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Com o arquivo criado, é preciso inicializar o terraform para que ele baixe o provider do vSphere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/img6.png&#34; alt=&#34;&lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;arquivos-terraform&#34;&gt;&lt;strong&gt;Arquivos Terraform&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;varstf&#34;&gt;&lt;strong&gt;vars.tf&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;É preciso configurar algumas variáveis para que o terraform consiga se comunicar com os recursos do ESXi e também para que as máquinas virtuais sejam criadas corretamente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data_center&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;ha-datacenter&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data_store&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;data-vol-1&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;mgmt_lan&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;VM Network&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;net_adapter_type&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vmxnet3&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;guest_id&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;centos7_64Guest&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;custom_iso_path&amp;#34;&lt;/span&gt; {
  default = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;iso/centos7-custom-img-disk50gb-v0.0.3.iso&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;name_new_vm&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Input a name for Virtual Machine Ex. new_vm&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vm_count&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Number of instaces&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;disk_size&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of Disk, Ex. 50, 60, 70 OBS: The amount may not be less than 50&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;num_cpus&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of vCPU’s, Ex. 2&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;num_mem&amp;#34;&lt;/span&gt; {
  description = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Amount of Memory, Ex. 1024, 2048, 3073, 4096&amp;#34;&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;instancetf&#34;&gt;&lt;strong&gt;instance.tf&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Aqui a mágica acontece, nesse arquivo vamos colocar os recursos para criação das máquinas virtuais.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_datacenter&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;datacenter&amp;#34;&lt;/span&gt; {
  name = var.data&lt;span style=&#34;&#34;&gt;_&lt;/span&gt;center
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_datastore&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;datastore&amp;#34;&lt;/span&gt; {
  name          = var.data&lt;span style=&#34;&#34;&gt;_&lt;/span&gt;store
  datacenter_id = data.vsphere_datacenter.datacenter.id
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_resource_pool&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;pool&amp;#34;&lt;/span&gt; {}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_network&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;networking&amp;#34;&lt;/span&gt; {
  name          = var.mgmt_lan
  datacenter_id = data.vsphere_datacenter.datacenter.id
}
&lt;span style=&#34;font-weight:bold&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;vsphere_virtual_machine&amp;#34;&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;virtualmachine&amp;#34;&lt;/span&gt; {
  count                      = var.vm_count
  name                       = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;var.name_new_vm&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;count.index + 1&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
  resource_pool_id           = data.vsphere_resource_pool.pool.id
  datastore_id               = data.vsphere_datastore.datastore.id
  force_power_off            = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  shutdown_wait_timeout      = 1
  num_cpus                   = var.num_cpus
  memory                     = var.num_mem
  wait_for_guest_net_timeout = 0
  guest_id                   = var.guest_id
  nested_hv_enabled          = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  
  network_interface {
    network_id   = data.vsphere_network.networking.id
    adapter_type = var.net_adapter_type
  }
  
  cdrom {
    datastore_id = data.vsphere_datastore.datastore.id
    path         = var.custom_iso_path
  }
  disk {
    size             = var.disk_size
    label            = &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;first-disk.vmdk&amp;#34;&lt;/span&gt;
    eagerly_scrub    = &lt;span style=&#34;font-weight:bold&#34;&gt;false&lt;/span&gt;
    thin_provisioned = &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resources&#34;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vsphere_datacenter:&lt;/strong&gt; Nome do datacenter que foi configurado dentro do vCenter/vSphere, por padrão o nome que vem configurado é ha-datacenter, esse informação você consegue na cli do ESXi.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_datastore:&lt;/strong&gt; storage/compartilhamento onde serão provisionados os arquivos e discos das máquinas virtuais que serão criadas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_resource_pool:&lt;/strong&gt; Pool de recursos criado para as máquinas virtuais.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_network:&lt;/strong&gt; Nome da network que as máquinas virtuais usarão para ter comunição com a rede interna e externa do seu datacenter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsphere_virtual_machine:&lt;/strong&gt; Cria de fato as máquinas virtuais, aqui fica especificado como as máquinas serão criadas. Os pontos relevantes nesse resource é a quantidade de máquinas, nome, quantidade de vCPU, memória, disco, network utilizada pela vm e o tipo de instalação que será utilizado para criar a máquina, nesse exemplo estou utilizando uma ISO customizada e automatizada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essas informações estão de forma customizada no arquivo &lt;strong&gt;vars.tf&lt;/strong&gt;, com isso no momento do planejamento do provisionamento com terraform um questionário será solicitado, abaixo segue o exemplo.&lt;/p&gt;
&lt;h3 id=&#34;terraform-plan&#34;&gt;&lt;strong&gt;terraform plan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Com os arquivos configurados podemos criar o plano de execução do terraform.
Um recurso muito legal que o terraform oferece é de entrada de dados, a forma como as varáveis foram configuradas no arquivo &lt;strong&gt;vars.tf&lt;/strong&gt; permite criar esse questionário para passar as informações necessárias para criação da(s) máquinas virtuais como disco, memória, vcpu, nome e quantidade.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
~]$ terraform plan --out deploy-vm.tfplan

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img3.png&#34; alt=&#34; &lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ao final do plan ele mostra a quantidade de recursos será criado, no exemplo serão 3 máquinas virtuais.
Definido o plan, é só aplicar as configurações para que os recursos sejam criados&lt;/p&gt;
&lt;h3 id=&#34;terraform-apply&#34;&gt;&lt;strong&gt;terraform apply&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
~]$ terraform apply deploy-vm.tfplan

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/img4.png&#34; alt=&#34; &lt;&gt;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/7QFKUhcVSEg&#34; title=&#34;Terraform + VMware&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/7QFKUhcVSEg/0.jpg&#34; alt=&#34;&lt;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A intenção do artigo é mostrar uma das muitas formas de se automatizar a infraestrutura tradicional que ainda existe no cenário das empresas brasileiras.
O &amp;ldquo;boom&amp;rdquo; dos provedores de Cloud ainda é recente e as empresas estão migrando com bastante cautela e muitas ainda estão planejando a migração, então, isso leva tempo e mesmo assim as empresas não param de crescer e aumentar a demanda dos produtos oferecidos.
A administração de sistemas tradicional existe mas com automação ela deve ser mais eficiente para acompanhar esse constante crescimento.&lt;/p&gt;
&lt;h3 id=&#34;referências&#34;&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/fabianoflorentino/terraform-vmware.git&#34;&gt;Arquivos utilizados&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Terraform:&lt;/strong&gt; &lt;a href=&#34;https://www.terraform.io/docs/providers/vsphere/index.html&#34;&gt;Documentação&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
